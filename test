local NotTheEndOfTheLine = false
-- --  Project Description
		-- --  "We are God's Project,,, We are a Dust in Universe,,, So Don't be an Arrogant Fools !!! "
--[[ 
{
		"There are NO HUMANS Holy like their Snoobishness say to us,,, Think This : HUMAN IS THE GREATEST DESTROYER EVER... Say Nope to Asteroid,,,"
			THE TRUE SURVIVAL "by" UltiMaxKom ]{
			CODENAME "The True Survival"
		"Somebody can be say as Holy, Someone that never Ostentatious about what they have, Someone that Always Do Goodness, Someone that ONLY DO AND NOT TALKING ABOUT WHAT THEY DO"
I Design this game starting from >= [25/9/2016] until it "Finished",,, this is the "Third Generation of the Legacy of ESM1"
So please don't get shocked or surprised see these Code Block "So UnEfficiently Long" And these are Bad,,, when you are better than me,,, btw, im beginner at coding :D
		"Learning and Trying ain't that hard guys,,, just try and you'll know what to do next to be better and be the best, best on your own current known stairs,,,"
-- -- -- --  WARNING !!! : PLEASE READ ALL THE NOTE BEFORE CONTINUING... IF CAN AND IF WANT... NEXT ACTION CASES IS DEFINED BELOW...
		"Pay Attention to your Environment as Much As Possible,,, cuz the Environment does not care if you getting sick of them,,,"
-- -- -- --  NOTE : YOU CAN BASICALLY, LEARN HOW TO PLAY THIS IN THE FORUM [Hedgewars.org] OR BY ASKING THE AUTHOR...
		"Read + Asking = Really Really Greater than Judge that something you don't know well yet"
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
	-- --  -- --  -- --  -- --  -- --  -- --  THE LICENSE
	-- --  -- --  -- --  This File and its Content Included Other Files That Have Same Author is Covered under a License of Copyrights ...
	Licensed Under 'GNU LGPL v3' or Later in Terms Of Copyrights...
	[
	COPY, SHARE, MAKE AS REFERENCE, LEARNING ON, AND DISTRIBUTE IS AT YOUR WILL BUT WHEN FOLLOW SOME SPECIFIED TERMS BELOW ...
	PROHIBITED TO MODIFY, RECLAIM/CLAIMING, AND FALSIFY/COUNTERFEIT THE CONTENT NOR THE FILES !!!
	REPEAT... DO NOT MODIFY THE CONTENT NOR THE FILES ITSELF WITHOUT KNOWLEDGE OF THE AUTHOR !!!
	DO NOT CLAIM THE CONTENT NOR THE FILES BY ANYBODY EXCEPT THE REAL AUTHOR OF THE CREATIONS !!!
	AND DO NOT FALSIFY THE CONTENT NOR THE FILES BY ANY WAY THROUGH ANY MANIPULATIONS !!!
	-- -- 
	WHEN COPYING OR MAKING THIS AS A REFERENCE ON THE CONTENT OR THE FILES,,, AUTHOR REQUESTED TO CREDITED ONLY IN NAME ...
	PS : "Ask The Author or Check the License For Detailed and Deeper Information of This Copyrights or For asking Permission..."
	Respectfully,
	]{
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
		"Copyrights only in Text Form,,, thare are better way to do,,, Be Understand and Appreciate by your own Consciousness,,, Respect can't be read on,,,"
-- --  {
		"Symbol which show our Level is Generosity WITHOUT A SHOWOFF ABOUT THAT,,, why ??? Its HARDER to GIVE WITHOUT SHOWING IT TO OTHER PEOPLE cuz Snoobishness"
SYMBOL Description :
		"Read to Seal your Trick to make any other sin with lying"
-- -- (or more) = Possition
+ = Addition
++ = Great Addition
+++ = Major Addition
++++ = Mass Addition
+++++ = Special
-  = Substraction
--  = Great Substraction
---  = Major Substraction
----  = Mass Substraction
? = Undefined
# = Base (or it Basically, Structure not Upgrade)
* = New Ideas
** = Old Idea
*** = Problem/Stuck
		"Not yet be seen Does Not meaning it Does Not Exist,,, What are Invisible but Absolutely Exist ??? Try guess,,,"
/// ANY Symbol thats NOT YET Exist here may to ask to the author for adding or ask for the meaning,,, In this case,,, just forget/lazy XD
-- --  }
		"Piramid into Greatness was build by ourself,,, Piramid Giza does NOT Build itself in a blink of an eye"
-- 
-- -- 
-- -- -- 
-- -- -- -- 
-- -- -- -- -- 
-- -- -- -- -- -- 
-- -- -- -- -- -- --  So ? What WHAT now ?
-- -- -- -- -- --  VERSION LIST :
-- -- -- --  Version 1.0 Codename "ESM1" Not Released [nil]
-- -- --  Intro : -- DEAD PROJECT-- 
-- -- --  Changelog : -- DEAD PROJECT-- 
-- -- --  Outro : -- DEAD PROJECT-- 
-- -- -- --  Version 1.1 Codename "Killed" Released [Date;?/?/?]
-- -- --  Intro : The Killed is the name for my long, dead ESM :C ,,, For that, TVTxt1 revenge it !!! i make this new ESM2 Or we should call it "ZombieMode |{_" or "ZMK"
-- --  This Version named as "The ESM2 Base"
-- -- --  Changelog :
-- --  ? What i should change ??? this still on the "Start Line" guys,,, and it can't be changed :)
-- -- --  Outro : I Should ADD MORE Content here,,, Please suggest what is missing ^^
-- -- -- --  Version 1.2 Codename "Dead Body" Released [Date;?/?/?]
-- -- --  Intro : The New !!! i mean, this was the modified base of ZMK_v1 , or i call it ESM2 Base,,,
-- -- --  Changelog :
-- --  +++ Zombie will be Spread Plague,,, Credit : mikade
-- --  +++ Graves will make Poisonous Gas, /// CREDIT TO Poison_Graves_v2.lua by -- Unknown--  (No Name Found)
-- --  +++ Spawn Reinforcement Crates (Health or Ammo or Utility) once per killing Zombie,,,
-- --  +++ Spawn Traps Crates, or we say it fakes and can containt Poison or Explosion or BOTH !!! It in form of Health or Ammo or Utility Crates
-- --  + Added more Weaponset in crates (Probalities still the same) ,,, but this extra ammo will only spawned in 50% chance,,,
-- -- --  Outro : Maybe Need more Balance next up
-- -- -- --  Version 1.3 Codename "New Life in Death" Released [Date;?/?/?]
-- -- --  Intro : Fixing Version,,, this version used to fixed the version before this,,, Credit : KoBeWi
-- -- --  Changelog :
-- --  + Fixed Non-- Bots Plague Clouds Spawning
-- --  + Fixed GetRandom(x) wrong usage
-- --  + Even Better Plague Spawning Settings
-- --  ++ Major Balance of crates spawning
-- -- --  Outro : Now the Problem reported by KoBeWi is fixed :)
-- -- -- --  Version 1.4 Codename "Decaying" Released [Date;?/?/?]
-- -- --  Intro : This is a Major Add for GOAL And point of the game,,,
-- -- --  Changelog :
-- --  +++ Create Mission Description,,, or i say, The Goal Guide,,,
-- --  ++ Make Bots Always have Weapons that they can use,,, added 2 different weapon to Bots each ressurection (ressurected hog)
-- --  ++ And Make Bots Always Have Utilities that they can use,,, every ressurection add 2 different utility to ressurected hog... 
-- -- --  Outro : I Need to ADD MORE !!! This is not ENOUGH !!!
-- -- -- --  Version 1.5a Codename "Scratch" Released (But released with only named with v1.5) [Date;?/?/?]
-- -- --  Intro : Only Version for Quick Launch Due "Two" Bug fixed
-- --  + Fixed Plague Kamikaze Bugs
-- --  + Fixed Ammo Bugs
-- -- --  Outro : NOTE ; Only for fix two bugs,,, not enough and very MINOR Version... hope bigger next up,,,
-- -- -- --  Version 1.5b Codename "Talking Dead" (But released with only named with v1.5) [Date;?/?/?]
-- -- --  Intro : This Version Including Zombie that Talking in Specified Event,,,
-- -- --  Changelog :
-- --  +++ Zombie Now Can Talk when Meet A Specified Event,,, Add your Comment and Suggest MORE !!!
-- -- --  Outro : This Funny things :D ,,, You Should Suggest For More, like More Event to be in this case too,,,
-- -- -- --  Version 1.6 Codename "Poisonous" Released [Date;?/?/?]
-- -- --  Intro : This Version Focus on Mistake
-- -- --  Changelog :
-- --  + Fixed Some Bugs
-- -- --  Outro : Need more Feature ;/
-- -- -- --  Version 1.7a Codename "Reminding #1" Released [Date;?/?/?]
-- -- -- --  Version 1.7b Codename "Reminding #2" Not Released [nil]
-- -- -- -- --  !!! BREAKOUT !!! RECREATE ZMK FROM SCRATCH !!! DUE THE FILE WAS ACCIDENTALLY LOST (BY HW AND NOTEPAD++ CONFLICT AT THE SAME TIME) !!!
-- /// !!! PS !!! CREDIT Part is not exist above,,, not created,,, but see on the Credit Section below,,, After this, Per version Credit part is created...
-- -- -- --  Version 2.1X Codename "Gate of The True-- Soul"
-- -- --  Intro : This should be a Major Changelog
-- -- --  Changelog :
-- --  ++++ ShopMode !!! /// CREDIT : "Consumerism_1.1b" By : "Vatten" :D Thank you very much for the Reference and some Lines of text that i have copy (no Permission for now)
-- /// * Item Available
--  ++++ Armory !!! This is a Buying Weaponary and its Ammo Mode
-- * All Weapon (Except Skip Hammer (Bugs), and Piano (other used)) is the Items here
--  ++++ TechnoCentre !!! This one will Upgrade Supporting Utilities and Upgrade other Properties
-- * # Attack Augmentation Upgrade # Armor Ressistance Upgrade # Damage Absorbency
--  ++++ Hospital !!! This place is the place to Restore and Upgrading Facility for our health
-- * # Health Restoration # Life Off-- Limit # Vampirism Intake
--  ++++ Pricelist Shocase !!! Only to see the Price of The Item within Shop Available
-- * # All Item in Armory
-- /// These is Very Much Recreation though
-- --  +++ Set The Defaults Weaponset, Gameflag, and Scheme
-- --  ++++ Add the Mutantion Level Feature
--  ++ Mutation Effect to HogHat and HogName and some other Properties
--  + Damage Modifier Setup only For Zombie
--  + Damage Modifier for Human only too has added too
-- --  ++++ Add NEW Bonus Damage modifier features such :
--  +++ Damage Augmentation
--  +++ Damage Ressistance
--  +++ Damage Vampirism
--  +++ Damage Absorbency
-- --  ++++ Added The Upgrade System for Human player
-- --  ++ Upgraded Bots Power
-- --  ++ Upgraded Bots Weaponary balance
-- --  ++++ ++++ ++++ ++++ MASSIVE BUGS FIXES with RECREATE THIS FROM SCRATCH (so this going v2.1X) !!!
-- --  -- -- -- --  OMG !!! All Version Changes from v1.1 to v.6 IS LOST AND ERASED DUE TO AUTHOR'S BIG MISTAKE,,, Then these Replace it ;O
-- -- --  Outro : WTF IS THIS ??? THIS IS VERY BIGGGGERRRRRR XD !!!!!
-- -- --  /// CREDIT : QuantumRage for testing and sheepluva for MAJOR Teacher ^^
-- -- -- --  Version 2.2 Codename "Reminding"
-- -- --  Intro : Contain some Bugs Fixes and Guides to Play and some Balance
-- --  +++ Swimmer Water Damage
-- --  +++ Guides for Newcomer
-- --  ++ Some Bugs Fixes
-- --  ++ Cash Start and Killing Bounty Balance
-- --  + Saving Cash
-- -- --  Outro : This should be able to release to the world :D
-- -- --  /// CREDIT : Myself,,, Alone
-- -- -- --  Version 2.4 Codename "Running Man"
-- -- --  Intro : Many Improvements here
-- -- --  Changelog :
-- --  /// These is MAJOR AND BIG LONG WORK !!!
-- --  +++++ KWaitExe System Created and Worked Clearly after MANY Fixing and Testing (Hard),,, BIG Work, really
-- --  +++++ New TP [The Properties] System,,, Big Work
-- --  +++++ The Cash System Created
-- --  ++++ ScoreAdd System Added
-- --  ++++ GoldSFX System Added
-- --  ++++ KillStreak System Added
-- --  ++++ ScoreSFX System Added
-- --  +++ Bonus Target for Bonus Cash when Destroyed
-- --  ++ Some Bugs Fixes
-- --  ++ Cost of Weaponary Balancing
-- --  ++ Max HP Feature adding a Limit
-- --  + Imbalance Fixes
-- -- --  Outro : This is Major too,,, really long Proccess through fixing, adding, replacing, deleting, and testing which really a BIG WORK too ;D
-- -- --  /// CREDIT : Myself,,, work alone
-- -- -- --  Version 2.5 Codename "Bloodpath"
-- -- --  Intro : This Add Leveling System !!! Get New Hair eh ?
-- -- --  Changelog :
-- --  +++++ ULevel System [UserLevel] Created
-- --  +++ ULevelSFX like the others
-- --  +++ Many Balance and Optimalization in many case
-- --  + Solution for Piano Bugs
-- --  + Solution for Hammer Bugs
-- -- --  Outro : Optimalization is good too,,, hope enough now to launch
-- -- --  /// CREDIT : Myself,,, Alone Again
-- -- -- --  Version 2.7 Codename "Endless"
-- -- --  Intro : EVEN BIGGER WORLD !!!
-- -- --  Changelog :
-- --  +++++ License of Copyrights is Adde (Credit : TO FaTony :))
-- --  +++++ Added MegaWeapon System = WOA !!!
-- --  # MWea List at Now [MegaWeapon] :
--  The Erasing Photon
--  The Raining Explosives
--  The RingOfFire
--  The Zeta Force
--  The Quadrinix Nuke
--  The Sun Burn
--  The Sandstorm
-- --  +++++ Added SuperTech System = WOW !!!
-- --  +++++ Added ZPower System = AOW !!!
-- --  +++++ Attributes System Now REALLY Fixed
-- --  ++++ Added New Attribute : 'Critical Damage'
-- --  ++++ Major Text Simplify
-- --  ++++ Major Systems Simplify [Credit : KobeWi]
-- --  ++++ MANY BALANCING !!!
-- --  +++ MANY Grammar Error Fixing, Yeah bad english ;/
-- --  +++ DamageTag System now get Tag Type Classifications for Specified System with its own place
-- --  + Minor Bugs Fixed (Credit : KoBeWi)
-- --  # MANY COMMENTS ADDED XD !!!
-- --  - MANY Text Removed !!!
-- --  --- Extinction Point is Removed :D !
-- --  ---- TP System is Removed D;
-- -- --  Outro : WTH Is This ???
-- -- --  /// CREDIT : Myself, FaTony and KoBeWi :D !!!
-- -- -- -- --  LATER VERSION ... RESPONSE TO MAKE IT FASTER ;DDDD
-- -- -- -- -- --  SUPPORT TO-DO ??? You vote and suggest for it :D
-- --  -NONE-  for now,,, add it please,,,
-- -- -- -- -- --  CREDITS :
-- --  "Credit your Parent Guys, Even they're bad to you"
-- -- -- -- --  SPECIAL Thanks :
-- -- -- --  *******To My Parents [idk ;/ ... Two Googol Thanks to Them]
-- -- -- --  *****To sheepluva [Very Thanks for Being a Master for Developing 2nd and 3rd Generation of ESM ;D]
-- -- -- --  ****To KoBwWi [Very Thanks for Being a Really Major Tester :) !!! Really Helping...]
-- -- -- --  ****To Anarchron [Very Thanks for Being a Teacher for Mistakes and Debugging]
-- -- -- --  ***To mikade [Very Thanks for some Theory and Knowledges]
-- -- -- --  ***To FaTony [Very Thanks for License Management Knowledges,,, Really Needed :)]
-- -- -- --  **To Wuzzy [Very Thanks to Knowledges and Inspirations he give...]
-- -- -- --  *To QuantumRage [Very Thanks for his Beta ESM1 and ZMK Tester]
-- -- -- --  ****To Consumerism_1.1b (Vatten) [Very Thanks for Reference,,, I Really Need it]
-- -- -- --  ****To Construction Mode [Very Thanks for Reference,,,]
-- -- -- -- --  Sample :
-- -- -- --  Officially :
-- -- --  -- NONE-- 
-- -- -- --  Unofficially :
-- -- --  Poison_Graves_v2
-- --   by -- Unknown-- 
--  at ["Creation Time of ZMK Base"]
-- -- --  Consumerism_1.1b (BIG THANKS)
-- --  by Vatten
--  At v2.1 and later
--  NOTE : I has Copy some and use reference (think reference is free,,, But still always cost at least thanks and respect at absolute value...) without Permission to the Author (Vatten) ... hope can find him and ask about this ;/ [NOT YET]
-- -- -- -- --  Ideas :
-- -- -- --  Officially :
-- -- --  -- Me-- 
-- --  # For hardly, found this project in trashcan
-- -- -- --  Unofficially :
-- -- -- -- --  Bug Fixes and Tester :
-- -- -- --  Officially :
-- -- --  sheepluva
-- --  +++++ Mass Discuss (More than these)
-- --  +++++ Sound Ideas and Solution
-- --  ++ Damage Explaination
-- --  + hwp. structure accident fix
-- -- --  KoBeWi
-- --  +++ Balancing idea
-- --  +++ Fixed some Minor Bugs (mistake)
-- --  ++ Reference Advice
-- --  ++ Fixed Non-- Bots Plague Clouds Spawning
-- --  + Fixed GetRandom(x) wrong usage
-- -- --  QuantumRage (Big Support :D)
-- --  # For testing Early ESM1,,, And Many Support after
-- -- -- --  Unofficially :
-- --  None
-- -- -- -- --  Others Thanks :
-- -- -- --  Officially :
-- -- --  -- My Little Brains-- 
-- --  # For make me exist
-- -- --  Dronium
-- --  + For Be Another Beta Tester (Minor)
-- -- -- --  Unofficially :
-- -- --  Mikade "For showing the link of post that have same idea"
-- --  at ["Creation Time of ZMK Base"]
-- --  + Spirit Up
-- -- -- -- -- --  END OF CREDITS
-- -- -- -- --  -- SOON-- 
-- -- -- -- 
-- -- -- 
-- -- 
-- 
		-- -- "Long Way to Read is Life"
end }
--]]
		-- --  "Word only can be pass our minds,,, But Action can Effect All Things include our Minds too,,,"
-- --  Word Shortcut
--[[
		"World's Secret Shortcut to Death is Never Mind and Do Not Concerned about Your Own Goodness in Health and Soul"
Keyword = True Word
		"Keyword of Real Heaven is Peace"
TTS = The True Survival ]{
MSG/msg = Massage
Z[+...] = Zombie
TOT/Tot = Total
LV/Lv = Level
Wea = Weapon
Util = Utility
/// Acutally these keyword does not used these days ;/ ... Nvm,,, let tham play their own lives here,,,
		"What thing that are Never Used ??? Heart of Mercy "
--]]
		-- --  "Describe your Behavior to your Parents Everydays,,, Do you realize ???"
-- --  Variable Description
--[[
		"Absolute Variable needed to win in the real game is Our Action, or we say Attitude or Behavior in The Game"
IDEA Name [Keyword] "Set Method, Value Forming, Lifespan State, Number of Purpose, Zone of Work"
		"We have been set to explode at our creation time"
A BaseVariable [BV] "Manually, Once, Changing, One, Locally"
GROUP SpecificVariable [SV] "Automatically, Many, Any, One, Free"
WHOLE TempVariable [TV] "Manually, Unstable, Any, Complex, Any"
PLANET LocalVariable [LV] "Any, Many, Changing, One, Statically"
STAR PermaVariable [PV] "Manually, Single, Permanent, One, Universally"
GALAXY GlobalVariable [GL] "Automatically, Single, Changing, One, Universally"
UNIVERSE UniverseVariable [UV] "Any, Any, Any, Complex, Universally"
/// These not used too these days D;
-- -- -- -- -- 
-- --  BaseVariable [BV]
-- --  SpesificVariable [SV]
-- --  TempVariable [TV]
-- --  LocalVariable [LV]
-- --  PermaVariable [PV]
-- --  GlobalVariable [GV]
-- --  UniverseVariable [UV]
-- -- -- -- -- 
/// Don't Bother about this,,, just reminder for me
--]]
		-- --  "Universe when transformed into a Storage,,, Still can't be Enough to Hold our Sins,,,"

 -- --  -- --   -- --  -- --   -- --  -- --   -- --  -- --   -- --  -- --   THE VARIABLES

		-- --  "Our World can be described as 'A Box of Chocolates' which 'Fat People' eat it Really Quickly..."

HedgewarsScriptLoad("/Scripts/Multiplayer/]{'s Searcher.lua")
HedgewarsScriptLoad("/Scripts/Multiplayer/]{'s Founder.lua")

-- /// NOTE !!!
-- I Just use some Variable Classification "As A Sugar" !!! Not A Specific Things though,,,
-- Nvm about these Classifications guys

-- Preset Variables Set
local AllGearTypes = {
-- PS : This Table also used As a Template for other uses
	-- -- -- Damaging Gears or Obviously such Potentially Damaging which usually IS Weapon BUT Not an actual Hedgehog (Deleting them does not delete hog (Hypotesis/Only My Theory))
	gtShell, 
	gtBee,
	gtGrenade, 
	gtAirBomb,
	gtRCPlane,
	gtClusterBomb,
	gtCluster,
	gtGasBomb,
	gtMine,
	gtMortar,
	gtHellishBomb,
	gtWatermelon,
	gtMelonPiece,
	gtEgg,
	gtDrill,
	gtBall,
	gtExplosives,
	gtFlame,
	gtDynamite,
	gtSMine,
	gtKamikaze,
	gtCake,
	gtKnife,
	gtMolotov,
	gtHammer,
	gtFirePunch,
	gtFlamethrower,
	gtDEagleShot,
	gtBlowtorch,
	gtAirMine,
	gtPoisonCloud,
	gtNapalmBomb,
	gtHammerHit,
	gtWhip,
	gtSniperRifleShot,
	gtSineGunShot,
	gtShover,
	gtShotgunShot,
	-- -- -- Utility Gears and gears that actually is Hedgehog (Not Damaging though)
	gtHedgehog,
	gtSeduction,
	gtRope,
	gtPortal,
	gtJetpack,
	gtBirdy,
	gtSnowball,
	gtSwitcher,
	gtParachute,
	gtLandGun,
	gtRessurector,
	gtIceGun,
	gtGirder,
	gtTardis,
	-- -- -- Others
	gtTarget,
	gtFlake,
	gtGrave
}
local GMissTable = {
-- PS : This Table also used As a Template for other uses
	-- -- -- Damaging Gears or Obviously such Potentially Damaging which usually IS Weapon BUT Not an actual Hedgehog (Deleting them does not delete hog (Hypotesis/Only My Theory))
	gtShell, 
	gtBee,
	gtGrenade, 
	gtAirBomb,
	gtRCPlane,
	gtClusterBomb,
	gtCluster,
	gtGasBomb,
	gtMine,
	gtMortar,
	gtHellishBomb,
	gtWatermelon,
	gtMelonPiece,
	gtEgg,
	gtDrill,
	gtBall,
	-- gtExplosives,
	-- gtFlame,
	-- gtDynamite,
	gtSMine,
	gtKamikaze,
	gtCake,
	gtKnife,
	-- gtMolotov,
	-- gtHammer,
	-- gtFirePunch,
	-- gtFlamethrower,
	gtDEagleShot,
	-- gtBlowtorch,
	-- gtAirMine,
	gtPoisonCloud,
	gtNapalmBomb,
	gtHammerHit,
	gtWhip,
	gtSniperRifleShot,
	gtSineGunShot,
	gtShover,
	gtShotgunShot,
	-- -- -- Utility Gears and gears that actually is Hedgehog (Not Damaging though)
	-- gtHedgehog,
	-- gtSeduction,
	-- gtRope,
	gtPortal,
	-- gtJetpack,
	-- gtBirdy,
	gtSnowball,
	-- gtSwitcher,
	-- gtParachute,
	gtLandGun,
	-- gtRessurector,
	-- gtIceGun,
	-- gtGirder,
	-- gtTardis,
	-- -- -- Others
	-- gtTarget,
	-- gtFlake,
	-- gtGrave
}
local PhP = { -- 
	{amNothing, "Nothing", 0, {  }, {  }, {  }, {  }, {  } },
	{amSkip, "Skip", 0, {  }, {  }, {  }, {  }, {  } },
	}

local Ballistic = { -- 
	{amBazooka, "Bazooka", 7, {  }, {  }, {  }, {  }, {  } },
	{amBee, "Bee", 7, {  }, {  }, {  }, {  }, {  } },
	{amMortar, "Mortar", 8, {  }, {  }, {  }, {  }, {  } },
	{amDrill, "Drill", 7, {  }, {  }, {  }, {  }, {  } },
	}

local Grenadier = { -- 
	{amGrenade, "Grenade", 5, {  }, {  }, {  }, {  }, {  } },
	{amClusterBomb, "Cluster Bomb", 5, {  }, {  }, {  }, {  }, {  } },
	{amMolotov, "Molotov", 5, {  }, {  }, {  }, {  }, {  } },
	{amGasBomb, "Old Limburger", 12, {  }, {  }, {  }, {  }, {  } },
	}

local Gunnerman = { -- 
	{amSineGun, "SineGun", 15, {  }, {  }, {  }, {  }, {  } },
	{amShotgun, "Shotgun", 6, {  }, {  }, {  }, {  }, {  } },
	{amSniperRifle, "Sniper Rifle", 4, {  }, {  }, {  }, {  }, {  } },
	{amDEagle, "Desert Eagle", 4, {  }, {  }, {  }, {  }, {  } },
	{amFlamethrower, "Flamethrower", 6, {  }, {  }, {  }, {  }, {  } },
	}

local MartialArt = { -- 
	{amKamikaze, "Kamikaze", 4, {  }, {  }, {  }, {  }, {  } },
	{amFirePunch, "Shoryuken", 5, {  }, {  }, {  }, {  }, {  } },
	{amWhip, "Whip", 7, {  }, {  }, {  }, {  }, {  } },
	{amBaseballBat, "BaseballBat", 9, {  }, {  }, {  }, {  }, {  } },
	{amSnowball, "Snowball", 5, {  }, {  }, {  }, {  }, {  } },
	{amKnife, "Knife", 7, {  }, {  }, {  }, {  }, {  } },
	}

local Trapper = { -- 
	{amMine, "Mine", 5, {  }, {  }, {  }, {  }, {  } },
	{amSMine, "Sticky Mine", 10, {  }, {  }, {  }, {  }, {  } },
	{amAirMine, "AirMine", 6, {  }, {  }, {  }, {  }, {  } },
	{amSeduction, "Seduction", 3, {  }, {  }, {  }, {  }, {  } },
	}

local AirForce = { -- 
	{amAirAttack, "Air Attack", 12, {  }, {  }, {  }, {  }, {  } },
	{amMineStrike, "Mine Strike", 12, {  }, {  }, {  }, {  }, {  } },
	{amDrillStrike, "Drill Strike", 12, {  }, {  }, {  }, {  }, {  } },
	{amNapalm, "Napalm", 12, {  }, {  }, {  }, {  }, {  } },
	}

local SuperWeapons = { -- 
	{amDynamite, "Dynamite", 17, {  }, {  }, {  }, {  }, {  } },
	{amHellishBomb, "Hellish Bomb", 30, {  }, {  }, {  }, {  }, {  } },
	{amCake, "Cake", 20, {  }, {  }, {  }, {  }, {  } },
	{amWatermelon, "Watermelon", 30, {  }, {  }, {  }, {  }, {  } },
	{amBallgun, "Ballgun", 30, {  }, {  }, {  }, {  }, {  } },
	{amRCPlane, "RC Plane", 25, {  }, {  }, {  }, {  }, {  } },
	{amIceGun, "IceGun", 25, {  }, {  }, {  }, {  }, {  } },
	}

local Builder = { -- 
	{amBlowTorch, "BlowTorch", 4, {  }, {  }, {  }, {  }, {  } },
	{amPickHammer, "PickHammer", 4, {  }, {  }, {  }, {  }, {  } },
	{amGirder, "Girder", 5, {  }, {  }, {  }, {  }, {  } },
	{amLandGun, "Land Gun", 7, {  }, {  }, {  }, {  }, {  } },
	{amRubber, "Rubber", 8, {  }, {  }, {  }, {  }, {  } }
	}
	
local Transportation = { -- 
	{amBirdy, "Birdy", 15, {  }, {  }, {  }, {  }, {  } },
	{amParachute, "Parachute", 3, {  }, {  }, {  }, {  }, {  } },
	{amSwitch, "Switch", 3, {  }, {  }, {  }, {  }, {  } },
	{amLowGravity, "Low Gravity", 5, {  }, {  }, {  }, {  }, {  } },
	{amRope, "Rope", 5, {  }, {  }, {  }, {  }, {  } },
	{amJetpack, "Jetpack", 6, {  }, {  }, {  }, {  }, {  } },
	{amPortalGun, "Portal Gun", 20, {  }, {  }, {  }, {  }, {  } },
	{amTeleport, "Teleport", 30, {  }, {  }, {  }, {  }, {  } },
	}

local SpecialBuffer = { -- 
	{amExtraDamage, "Extra Damage", 35, {  }, {  }, {  }, {  }, {  } },
	{amInvulnerable, "Invulnerable", 25, {  }, {  }, {  }, {  }, {  } },
	{amExtraTime, "Extra Time", 30, {  }, {  }, {  }, {  }, {  } },
	{amLaserSight, "Laser Sight", 5, {  }, {  }, {  }, {  }, {  } },
	{amVampiric, "Vampiric", 25, {  }, {  }, {  }, {  }, {  } },
	{amResurrector, "Resurrector", 10, {  }, {  }, {  }, {  }, {  } },
	{amTardis, "Tardis", 5, {  }, {  }, {  }, {  }, {  } },
	}
local ArsenalUnlockerSet = {
	[1]={
	----{amNothing, "Nothing", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amSkip, "Skip", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amPiano, "Piano", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amHammer, "Hammer", 0, {  }, { 1 }, {  }, {  }, {  } },
	{amBazooka, "Ballistic", 10, Ballistic},
	{amGrenade, "Grenadier", 10, Grenadier},
	{amKamikaze, "Gunnerman", 10, Gunnerman},
	{amSineGun, "MartialArt", 10, MartialArt},
	{amClusterBomb, "Trapper", 10, Trapper},
	{amBee, "AirForce", 10, AirForce},
	{amShotgun, "SuperWeapon", 10, SuperWeapons},
	{amMine, "Builder", 10, Builder},
	{amSniperRifle, "Transportation", 10, Transportation},
	{amDEagle, "SpecialBuffer", 10, SpecialBuffer},
	----{amDynamite, "Dynamite", 17, {  }, {  }, {  }, {  }, {  } },
	----{amFirePunch, "Shoryuken", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amHellishBomb, "Hellish Bomb", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amWhip, "Whip", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBaseballBat, "BaseballBat", 9, {  }, { 1 }, {  }, {  }, {  } },
	----{amMortar, "Mortar", 8, {  }, { 1 }, {  }, {  }, {  } },
	----{amCake, "Cake", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amWatermelon, "Watermelon", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amDrill, "Drill", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBallgun, "Ballgun", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amMolotov, "Molotov", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBirdy, "Birdy", 15, {  }, { 1 }, {  }, {  }, {  } },
	----{amRCPlane, "RC Plane", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amGasBomb, "Old Limburger", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amFlamethrower, "Flamethrower", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amSMine, "Sticky Mine", 10, {  }, { 1 }, {  }, {  }, {  } },
	----{amSnowball, "Snowball", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirAttack, "Air Attack", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amMineStrike, "Mine Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amDrillStrike, "Drill Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amNapalm, "Napalm", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirMine, "AirMine", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amKnife, "Knife", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBlowTorch, "BlowTorch", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amPickHammer, "PickHammer", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amSeduction, "Life Limit-plus", 2, {  }, { 0.04 }, {  }, {  }, {  } },
	----{amParachute, "Parachute", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amGirder, "Girder", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amSwitch, "Switch", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amLowGravity, "Low Gravity", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraDamage, "Extra Damage", 35, {  }, { 1 }, {  }, {  }, {  } },
	----{amRope, "Defuse-o-Miss", 2, {  }, { 0.00032 }, {  }, {  }, {  } },
	----{amInvulnerable, "Invulnerable", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraTime, "Extra Time", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLaserSight, "Laser Sight", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amVampiric, "Vampiric Intake", 2, {  }, { 0.01 }, {  }, {  }, {  } },
	----{amJetpack, "Jetpack", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amPortalGun, "Portal Gun", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amResurrector, "Health Restoration", 2, {  }, { 0.05 }, {  }, {  }, {  } }
	----{amTeleport, "Teleport", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLandGun, "Land Gun", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amTardis, "Tardis", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amIceGun, "IceGun", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amRubber, "Rubber", 8, {  }, { 1 }, {  }, {  }, {  } }
	}
}
local TeamAvailableWeapons = {}
local AllWeapon = 
{ -- AllWeapon
	{amNothing, "Nothing", 0},
	{amSkip, "Skip", 0},
	--{amPiano, "Piano", 0},
	--{amHammer, "Hammer", 0},
	{amBazooka, "Bazooka", 7},
	{amGrenade, "Grenade", 5},
	{amKamikaze, "Kamikaze", 4},
	{amSineGun, "SineGun", 15},
	{amClusterBomb, "Cluster Bomb", 5},
	{amBee, "Bee", 7},
	{amShotgun, "Shotgun", 6},
	{amMine, "Mine", 5},
	{amSniperRifle, "Sniper Rifle", 4},
	{amDEagle, "Desert Eagle", 4},
	{amDynamite, "Dynamite", 17},
	{amFirePunch, "Shoryuken", 5},
	{amHellishBomb, "Hellish Bomb", 30},
	{amWhip, "Whip", 7},
	{amBaseballBat, "BaseballBat", 9},
	{amMortar, "Mortar", 8},
	{amCake, "Cake", 20},
	{amWatermelon, "Watermelon", 30},
	{amDrill, "Drill", 7},
	{amBallgun, "Ballgun", 30},
	{amMolotov, "Molotov", 5},
	{amBirdy, "Birdy", 15},
	{amRCPlane, "RC Plane", 25},
	{amGasBomb, "Old Limburger", 12},
	{amFlamethrower, "Flamethrower", 6},
	{amSMine, "Sticky Mine", 10},
	{amSnowball, "Snowball", 5},
	{amAirAttack, "Air Attack", 12},
	{amMineStrike, "Mine Strike", 12},
	{amDrillStrike, "Drill Strike", 12},
	{amNapalm, "Napalm", 12},
	{amAirMine, "AirMine", 6},
	{amKnife, "Knife", 7},
	{amBlowTorch, "BlowTorch", 4},
	{amPickHammer, "PickHammer", 4},
	{amSeduction, "Seduction", 3},
	{amParachute, "Parachute", 3},
	{amGirder, "Girder", 5},
	{amSwitch, "Switch", 3},
	{amLowGravity, "Low Gravity", 5},
	{amExtraDamage, "Extra Damage", 35},
	{amRope, "Rope", 5},
	{amInvulnerable, "Invulnerable", 25},
	{amExtraTime, "Extra Time", 30},
	{amLaserSight, "Laser Sight", 5},
	{amVampiric, "Vampiric", 25},
	{amJetpack, "Jetpack", 6},
	{amPortalGun, "Portal Gun", 20},
	{amResurrector, "Resurrector", 10},
	{amTeleport, "Teleport", 30},
	{amLandGun, "Land Gun", 7},
	{amTardis, "Tardis", 5},
	{amIceGun, "IceGun", 25},
	{amRubber, "Rubber", 8}
}
local FoundrySet = 
{
[1]={ ---- Classic Weapon
	----{amNothing, "Nothing", 0} , ----{amSkip, "Skip", 0} , ----{amPiano, "Piano", 0} , ----{amHammer, "Hammer", 0, {  }, { 1 }, {  }, {  }, {  } },
	{amBazooka, "Bazooka", 7, {  }, { 1 }, {  }, {  }, {  } },
	{amGrenade, "Grenade", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amKamikaze, "Kamikaze", 4, {  }, { 1 }, {  }, {  }, {  } },
	{amSineGun, "SineGun", 15, {  }, { 1 }, {  }, {  }, {  } },
	{amClusterBomb, "Cluster Bomb", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amBee, "Bee", 7, {  }, { 1 }, {  }, {  }, {  } },
	{amShotgun, "Shotgun", 6, {  }, { 1 }, {  }, {  }, {  } },
	{amMine, "Mine", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amSniperRifle, "Sniper Rifle", 4, {  }, { 1 }, {  }, {  }, {  } },
	{amDEagle, "Desert Eagle", 4, {  }, { 1 }, {  }, {  }, {  } },
	{amFirePunch, "Shoryuken", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amWhip, "Whip", 7, {  }, { 1 }, {  }, {  }, {  } },
	{amPickHammer, "PickHammer", 4, {  }, { 1 }, {  }, {  }, {  } },
	{amBaseballBat, "BaseballBat", 9, {  }, { 1 }, {  }, {  }, {  } },
	{amMortar, "Mortar", 8, {  }, { 1 }, {  }, {  }, {  } },
	{amSeduction, "Seduction", 3, {  }, { 1 }, {  }, {  }, {  } },
	{amDrill, "Drill", 7, {  }, { 1 }, {  }, {  }, {  } },
	{amMolotov, "Molotov", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amBirdy, "Birdy", 15, {  }, { 1 }, {  }, {  }, {  } },
	{amBlowTorch, "BlowTorch", 4, {  }, { 1 }, {  }, {  }, {  } },
	{amGasBomb, "Old Limburger", 12, {  }, { 1 }, {  }, {  }, {  } },
	{amFlamethrower, "Flamethrower", 6, {  }, { 1 }, {  }, {  }, {  } },
	{amSMine, "Sticky Mine", 10, {  }, { 1 }, {  }, {  }, {  } },
	{amSnowball, "Snowball", 3, {  }, { 1 }, {  }, {  }, {  } },
	{amParachute, "Parachute", 3, {  }, { 1 }, {  }, {  }, {  } },
	{amGirder, "Girder", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amSwitch, "Switch", 3, {  }, { 1 }, {  }, {  }, {  } },
	{amLowGravity, "Low Gravity", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amRope, "Rope", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amLaserSight, "Laser Sight", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amVampiric, "Vampiric", 25, {  }, { 1 }, {  }, {  }, {  } },
	{amJetpack, "Jetpack", 6, {  }, { 1 }, {  }, {  }, {  } },
	{amPortalGun, "Portal Gun", 20, {  }, { 1 }, {  }, {  }, {  } },
	{amResurrector, "Resurrector", 10, {  }, { 1 }, {  }, {  }, {  } },
	{amLandGun, "Land Gun", 7, {  }, { 1 }, {  }, {  }, {  } },
	{amTardis, "Tardis", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amKnife, "Knife", 7, {  }, { 1 }, {  }, {  }, {  } },
	{amRubber, "Rubber", 8, {  }, { 1 }, {  }, {  }, {  } },
	{amAirAttack, "Air Attack", 12, {  }, { 1 }, {  }, {  }, {  } },
	{amMineStrike, "Mine Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	{amDrillStrike, "Drill Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	{amNapalm, "Napalm", 12, {  }, { 1 }, {  }, {  }, {  } },
	{amAirMine, "AirMine", 6, {  }, { 1 }, {  }, {  }, {  } }
	----{amHellishBomb, "Hellish Bomb", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amWatermelon, "Watermelon", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amBallgun, "Ballgun", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amRCPlane, "RC Plane", 27, {  }, { 1 }, {  }, {  }, {  } },
	----{amCake, "Cake", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amDynamite, "Dynamite", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraDamage, "Extra Damage", 35, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraTime, "Extra Time", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amTeleport, "Teleport", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amInvulnerable, "Invulnerable", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amIceGun, "IceGun", 25, {  }, { 1 }, {  }, {  }, {  } }
	},
[2]={ ---- SuperWeapon
	----{amNothing, "Nothing", 0} , ----{amSkip, "Skip", 0} , ----{amPiano, "Piano", 0} , ----{amHammer, "Hammer", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amBazooka, "Bazooka", 7, {  }, { 1 }, {  }, {  }, {  } },{amGrenade, "Grenade", 5, {  }, { 1 }, {  }, {  }, {  } },{amKamikaze, "Kamikaze", 4, {  }, { 1 }, {  }, {  }, {  } },{amSineGun, "SineGun", 15, {  }, { 1 }, {  }, {  }, {  } },{amClusterBomb, "Cluster Bomb", 5, {  }, { 1 }, {  }, {  }, {  } },{amBee, "Bee", 7, {  }, { 1 }, {  }, {  }, {  } },{amShotgun, "Shotgun", 6, {  }, { 1 }, {  }, {  }, {  } },{amMine, "Mine", 5, {  }, { 1 }, {  }, {  }, {  } },{amSniperRifle, "Sniper Rifle", 4, {  }, { 1 }, {  }, {  }, {  } },{amDEagle, "Desert Eagle", 4, {  }, { 1 }, {  }, {  }, {  } },{amFirePunch, "Shoryuken", 5, {  }, { 1 }, {  }, {  }, {  } },{amWhip, "Whip", 7, {  }, { 1 }, {  }, {  }, {  } },{amPickHammer, "PickHammer", 4, {  }, { 1 }, {  }, {  }, {  } },{amBaseballBat, "BaseballBat", 9, {  }, { 1 }, {  }, {  }, {  } },{amMortar, "Mortar", 8, {  }, { 1 }, {  }, {  }, {  } },{amSeduction, "Seduction", 3, {  }, { 1 }, {  }, {  }, {  } },{amDrill, "Drill", 7, {  }, { 1 }, {  }, {  }, {  } },{amMolotov, "Molotov", 5, {  }, { 1 }, {  }, {  }, {  } },{amBirdy, "Birdy", 15, {  }, { 1 }, {  }, {  }, {  } },{amBlowTorch, "BlowTorch", 4, {  }, { 1 }, {  }, {  }, {  } },{amGasBomb, "Old Limburger", 12, {  }, { 1 }, {  }, {  }, {  } },{amFlamethrower, "Flamethrower", 6, {  }, { 1 }, {  }, {  }, {  } },{amSMine, "Sticky Mine", 10, {  }, { 1 }, {  }, {  }, {  } },{amSnowball, "Snowball", 5, {  }, { 1 }, {  }, {  }, {  } },{amParachute, "Parachute", 3, {  }, { 1 }, {  }, {  }, {  } },{amGirder, "Girder", 5, {  }, { 1 }, {  }, {  }, {  } },{amSwitch, "Switch", 3, {  }, { 1 }, {  }, {  }, {  } },{amLowGravity, "Low Gravity", 5, {  }, { 1 }, {  }, {  }, {  } },{amRope, "Rope", 5, {  }, { 1 }, {  }, {  }, {  } },{amLaserSight, "Laser Sight", 5, {  }, { 1 }, {  }, {  }, {  } },{amVampiric, "Vampiric", 25, {  }, { 1 }, {  }, {  }, {  } },{amJetpack, "Jetpack", 6, {  }, { 1 }, {  }, {  }, {  } },{amPortalGun, "Portal Gun", 20, {  }, { 1 }, {  }, {  }, {  } },{amResurrector, "Resurrector", 10, {  }, { 1 }, {  }, {  }, {  } },{amLandGun, "Land Gun", 7, {  }, { 1 }, {  }, {  }, {  } },{amTardis, "Tardis", 5, {  }, { 1 }, {  }, {  }, {  } },{amKnife, "Knife", 7, {  }, { 1 }, {  }, {  }, {  } },{amRubber, "Rubber", 8, {  }, { 1 }, {  }, {  }, {  } },{amAirAttack, "Air Attack", 12, {  }, { 1 }, {  }, {  }, {  } },{amMineStrike, "Mine Strike", 12, {  }, { 1 }, {  }, {  }, {  } },{amDrillStrike, "Drill Strike", 12, {  }, { 1 }, {  }, {  }, {  } },{amNapalm, "Napalm", 12, {  }, { 1 }, {  }, {  }, {  } },{amAirMine, "AirMine", 6}
	{amHellishBomb, "Hellish Bomb", 30, {  }, { 1 }, {  }, {  }, {  } },
	{amWatermelon, "Watermelon", 30, {  }, { 1 }, {  }, {  }, {  } },
	{amBallgun, "Ballgun", 30, {  }, { 1 }, {  }, {  }, {  } },
	{amRCPlane, "RC Plane", 27, {  }, { 1 }, {  }, {  }, {  } },
	{amCake, "Cake", 25, {  }, { 1 }, {  }, {  }, {  } },
	{amDynamite, "Dynamite", 20, {  }, { 1 }, {  }, {  }, {  } },
	{amExtraDamage, "Extra Damage", 35, {  }, { 1 }, {  }, {  }, {  } },
	{amExtraTime, "Extra Time", 30, {  }, { 1 }, {  }, {  }, {  } },
	{amTeleport, "Teleport", 30, {  }, { 1 }, {  }, {  }, {  } },
	{amInvulnerable, "Invulnerable", 25, {  }, { 1 }, {  }, {  }, {  } },
	{amIceGun, "IceGun", 25, {  }, { 1 }, {  }, {  }, {  } }
	},
[3]={ ---- MegaWeapon
	----{amNothing, "Nothing", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amSkip, "Skip", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amPiano, "Piano", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amHammer, "Hammer", 0, {  }, { 1 }, {  }, {  }, {  } },
	--{amBazooka, "Power Shell", 7, {  }, { 1 }, {  }, {  }, {  } },
	--{amGrenade, "Incendiary", 5, {  }, { 1 }, {  }, {  }, {  } },
	--{amKamikaze, "Soul Splitter", 4, {  }, { 1 }, {  }, {  }, {  } },
	--{amSineGun, "Quark Wave", 15, {  }, { 1 }, {  }, {  }, {  } },
	--{amClusterBomb, "Shatter Grenade", 5, {  }, { 1 }, {  }, {  }, {  } },
	--{amBee, "Flower Power", 7, {  }, { 1 }, {  }, {  }, {  } },
	--{amShotgun, "Sturdy Slug", 6, {  }, { 1 }, {  }, {  }, {  } },
	--{amMine, "Static Trap", 5, {  }, { 1 }, {  }, {  }, {  } },
	--{amSniperRifle, "Trifle", 4, {  }, { 1 }, {  }, {  }, {  } },
	{amDEagle, "Muzzler", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amDynamite, "Dynamite", 17, {  }, { 1 }, {  }, {  }, {  } },
	--{amFirePunch, "Flashpunch", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amHellishBomb, "Hellish Bomb", 30, {  }, { 1 }, {  }, {  }, {  } },
	--{amWhip, "EM Lasher", 7, {  }, { 1 }, {  }, {  }, {  } },
	--{amBaseballBat, "Slam Bat", 9, {  }, { 1 }, {  }, {  }, {  } },
	--{amMortar, "Javelin", 8, {  }, { 1 }, {  }, {  }, {  } },
	----{amCake, "Cake", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amWatermelon, "Watermelon", 30, {  }, { 1 }, {  }, {  }, {  } },
	--{amDrill, "Penetra", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBallgun, "Ballgun", 30, {  }, { 1 }, {  }, {  }, {  } },
	--{amMolotov, "Tetraflrurofera-F66", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBirdy, "Birdy", 15, {  }, { 1 }, {  }, {  }, {  } },
	----{amRCPlane, "RC Plane", 25, {  }, { 1 }, {  }, {  }, {  } },
	--{amGasBomb, "Supa-Vodka", 12, {  }, { 1 }, {  }, {  }, {  } },
	{amFlamethrower, "Ring of Fire", 6, {  }, { 1 }, {  }, {  }, {  } },
	--{amSMine, "Spiderling", 10, {  }, { 1 }, {  }, {  }, {  } },
	--{amSnowball, "Randax", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amAirAttack, "Danger Close", 12, {  }, { 1 }, {  }, {  }, {  } }
	----{amMineStrike, "Mine Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	--{amDrillStrike, "Dune Worms", 12, {  }, { 1 }, {  }, {  }, {  } },
	--{amNapalm, "Flamebomb", 12, {  }, { 1 }, {  }, {  }, {  } },
	--{amAirMine, "Fragmentor", 6, {  }, { 1 }, {  }, {  }, {  } },
	--{amKnife, "Speed Carver", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBlowTorch, "BlowTorch", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amPickHammer, "PickHammer", 4, {  }, { 1 }, {  }, {  }, {  } },
	--{amSeduction, "Heartbreaker", 3, {  }, { 1 }, {  }, {  }, {  } }
	----{amParachute, "Parachute", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amGirder, "Girder", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amSwitch, "Switch", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amLowGravity, "Low Gravity", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraDamage, "Extra Damage", 35, {  }, { 1 }, {  }, {  }, {  } },
	----{amRope, "Rope", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amInvulnerable, "Invulnerable", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraTime, "Extra Time", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLaserSight, "Laser Sight", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amVampiric, "Vampiric", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amJetpack, "Jetpack", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amPortalGun, "Portal Gun", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amResurrector, "Resurrector", 10, {  }, { 1 }, {  }, {  }, {  } },
	----{amTeleport, "Teleport", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLandGun, "Land Gun", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amTardis, "Tardis", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amIceGun, "IceGun", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amRubber, "Rubber", 8, {  }, { 1 }, {  }, {  }, {  } }
	},
[4]={ ---- OmegaWeapon
	----{amNothing, "Nothing", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amSkip, "Skip", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amPiano, "Piano", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amHammer, "Hammer", 0, {  }, { 1 }, {  }, {  }, {  } },
	--{amBazooka, "Impetus", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amGrenade, "Incendiary", 5, {  }, { 1 }, {  }, {  }, {  } },
	--{amKamikaze, "Suicide Squad", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amSineGun, "Quark Wave", 15, {  }, { 1 }, {  }, {  }, {  } },
	{amClusterBomb, "Virgo Supercluster", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBee, "Flower Power", 7, {  }, { 1 }, {  }, {  }, {  } },
	--{amShotgun, "Hydragun", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amMine, "Static Trap", 5, {  }, { 1 }, {  }, {  }, {  } },
	--{amSniperRifle, "Assassinator", 4, {  }, { 1 }, {  }, {  }, {  } },
	{amDEagle, "Minigun", 4, {  }, { 1 }, {  }, {  }, {  } },
	--{amDynamite, "Explode-a-Tron", 17, {  }, { 1 }, {  }, {  }, {  } },
	----{amFirePunch, "Flashpunch", 5, {  }, { 1 }, {  }, {  }, {  } },
	--{amHellishBomb, "Atomic Bomb", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amWhip, "EM Lasher", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBaseballBat, "Slam Bat", 9, {  }, { 1 }, {  }, {  }, {  } },
	----{amMortar, "Javelin", 8, {  }, { 1 }, {  }, {  }, {  } },
	--{amCake, "Sweetie", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amWatermelon, "Watermelon", 30, {  }, { 1 }, {  }, {  }, {  } },
	--{amDrill, "Bunker Buster", 7, {  }, { 1 }, {  }, {  }, {  } },
	--{amBallgun, "Chaozin", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amMolotov, "Tetraflrurofera-F66", 5, {  }, { 1 }, {  }, {  }, {  } },
	--{amBirdy, "Eggiptic", 15, {  }, { 1 }, {  }, {  }, {  } },
	--{amRCPlane, "Blackbird", 25, {  }, { 1 }, {  }, {  }, {  } },
	--{amGasBomb, "Green Cloud", 12, {  }, { 1 }, {  }, {  }, {  } },
	--{amFlamethrower, "Ashtone", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amSMine, "Spiderling", 10, {  }, { 1 }, {  }, {  }, {  } },
	{amSnowball, "Sandstorm", 5, {  }, { 1 }, {  }, {  }, {  } },
	--{amAirAttack, "Zeta Skystrike", 12, {  }, { 1 }, {  }, {  }, {  } },
	--{amMineStrike, "Lethal Traps", 12, {  }, { 1 }, {  }, {  }, {  } },
	--{amDrillStrike, "Quaker", 12, {  }, { 1 }, {  }, {  }, {  } },
	--{amNapalm, "Sunburn", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirMine, "Fragmentor", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amKnife, "Speed Carver", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBlowTorch, "BlowTorch", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amPickHammer, "PickHammer", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amSeduction, "Heartbreaker", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amParachute, "Parachute", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amGirder, "Girder", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amSwitch, "Switch", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amLowGravity, "Low Gravity", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraDamage, "Extra Damage", 35, {  }, { 1 }, {  }, {  }, {  } },
	----{amRope, "Rope", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amInvulnerable, "Invulnerable", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraTime, "Extra Time", 30, {  }, { 1 }, {  }, {  }, {  } },
	{amLaserSight, "Rhoton", 5, {  }, { 1 }, {  }, {  }, {  } }
	----{amVampiric, "Vampiric", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amJetpack, "Jetpack", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amPortalGun, "Portal Gun", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amResurrector, "Resurrector", 10, {  }, { 1 }, {  }, {  }, {  } },
	----{amTeleport, "Teleport", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLandGun, "Land Gun", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amTardis, "Tardis", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amIceGun, "IceGun", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amRubber, "Rubber", 8, {  }, { 1 }, {  }, {  }, {  } }
	},
[5]={ ---- UltimateWeapon
	----{amNothing, "Nothing", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amSkip, "Skip", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amPiano, "Piano", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amHammer, "Hammer", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amBazooka, "Impetus", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amGrenade, "Incendiary", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amKamikaze, "Suicide Squad", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amSineGun, "Quark Wave", 15, {  }, { 1 }, {  }, {  }, {  } },
	----{amClusterBomb, "Virgo Supercluster", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBee, "Flower Power", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amShotgun, "Hydragun", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amMine, "Static Trap", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amSniperRifle, "Assassinator", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amDEagle, "Minigun", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amDynamite, "Explode-a-Tron", 17, {  }, { 1 }, {  }, {  }, {  } },
	----{amFirePunch, "Flashpunch", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amHellishBomb, "Orichalcix Nuke", 30, {  }, { 1 }, {  }, {  }, {  } }
	----{amWhip, "EM Lasher", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBaseballBat, "Slam Bat", 9, {  }, { 1 }, {  }, {  }, {  } },
	----{amMortar, "Javelin", 8, {  }, { 1 }, {  }, {  }, {  } },
	--{amCake, "Candy Crush", 20, {  }, { 1 }, {  }, {  }, {  } },
	--{amWatermelon, "Satan's Fruit", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amDrill, "Bunker Buster", 7, {  }, { 1 }, {  }, {  }, {  } },
	--{amBallgun, "Hexaferrum Gun", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amMolotov, "Tetraflrurofera-F66", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBirdy, "Eggiptic", 15, {  }, { 1 }, {  }, {  }, {  } },
	--{amRCPlane, "Infinitum", 25}
	----{amGasBomb, "Green Cloud", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amFlamethrower, "Ashtone", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amSMine, "Spiderling", 10, {  }, { 1 }, {  }, {  }, {  } },
	----{amSnowball, "Sandstorm", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirAttack, "Zeta Skystrike", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amMineStrike, "Lethal Traps", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amDrillStrike, "Quaker", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amNapalm, "Sunburn", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirMine, "Fragmentor", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amKnife, "Speed Carver", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBlowTorch, "BlowTorch", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amPickHammer, "PickHammer", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amSeduction, "Heartbreaker", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amParachute, "Parachute", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amGirder, "Girder", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amSwitch, "Switch", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amLowGravity, "Low Gravity", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraDamage, "Extra Damage", 35, {  }, { 1 }, {  }, {  }, {  } },
	----{amRope, "Rope", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amInvulnerable, "Invulnerable", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraTime, "Extra Time", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLaserSight, "Rhoton", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amVampiric, "Vampiric", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amJetpack, "Jetpack", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amPortalGun, "Portal Gun", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amResurrector, "Resurrector", 10, {  }, { 1 }, {  }, {  }, {  } },
	----{amTeleport, "Teleport", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLandGun, "Land Gun", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amTardis, "Tardis", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amIceGun, "IceGun", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amRubber, "Rubber", 8, {  }, { 1 }, {  }, {  }, {  } }
	}
}
local TechnocoreSet = { 
[1]={ -- Workshop
	----{amNothing, "Nothing", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amSkip, "Skip", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amPiano, "Piano", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amHammer, "Hammer", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amBazooka, "Bazooka", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amGrenade, "Grenade", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amKamikaze, "Kamikaze", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amSineGun, "SineGun", 15, {  }, { 1 }, {  }, {  }, {  } },
	----{amClusterBomb, "Cluster Bomb", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBee, "Bee", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amShotgun, "Shotgun", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amMine, "Mine", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amSniperRifle, "Sniper Rifle", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amDEagle, "Desert Eagle", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amDynamite, "Dynamite", 17, {  }, { 1 }, {  }, {  }, {  } },
	----{amFirePunch, "Shoryuken", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amHellishBomb, "Hellish Bomb", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amWhip, "Whip", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBaseballBat, "BaseballBat", 9, {  }, { 1 }, {  }, {  }, {  } },
	----{amMortar, "Mortar", 8, {  }, { 1 }, {  }, {  }, {  } },
	----{amCake, "Cake", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amWatermelon, "Watermelon", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amDrill, "Drill", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBallgun, "Ballgun", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amMolotov, "Molotov", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBirdy, "Birdy", 15, {  }, { 1 }, {  }, {  }, {  } },
	----{amRCPlane, "RC Plane", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amGasBomb, "Old Limburger", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amFlamethrower, "Flamethrower", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amSMine, "Sticky Mine", 10, {  }, { 1 }, {  }, {  }, {  } },
	----{amSnowball, "Snowball", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirAttack, "Air Attack", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amMineStrike, "Mine Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amDrillStrike, "Drill Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amNapalm, "Napalm", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirMine, "AirMine", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amKnife, "Knife", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBlowTorch, "BlowTorch", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amPickHammer, "PickHammer", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amSeduction, "Seduction", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amParachute, "Parachute", 3, {  }, { 1 }, {  }, {  }, {  } },
	{amGirder, "Armor Ressistance", 2, {  }, { 0.006 }, {  }, {  }, {  } },
	----{amSwitch, "Switch", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amLowGravity, "Low Gravity", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amExtraDamage, "Damage Augmentation", 2, {  }, { 0.01 }, {  }, {  }, {  } },
	----{amRope, "Rope", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amInvulnerable, "Invulnerable", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraTime, "Extra Time", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLaserSight, "Laser Sight", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amVampiric, "Critical Damage", 2, {  }, { 0.065 }, {  }, {  }, {  } },
	----{amJetpack, "Jetpack", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amPortalGun, "Portal Gun", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amResurrector, "Resurrector", 10, {  }, { 1 }, {  }, {  }, {  } },
	----{amTeleport, "Teleport", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLandGun, "Land Gun", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amTardis, "Tardis", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amIceGun, "IceGun", 25, {  }, { 1 }, {  }, {  }, {  } },
	{amRubber, "Damage Absorbency", 2, {  }, { 0.012 }, {  }, {  }, {  } }
	}
}
local TradecentreSet = {
[1]={ -- Market
	----{amNothing, "Nothing", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amSkip, "Skip", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amPiano, "Piano", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amHammer, "Hammer", 0, {  }, { 1 }, {  }, {  }, {  } },
	----{amBazooka, "Bazooka", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amGrenade, "Grenade", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amKamikaze, "Kamikaze", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amSineGun, "SineGun", 15, {  }, { 1 }, {  }, {  }, {  } },
	----{amClusterBomb, "Cluster Bomb", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBee, "Bee", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amShotgun, "Shotgun", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amMine, "Mine", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amSniperRifle, "Sniper Rifle", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amDEagle, "Desert Eagle", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amDynamite, "Dynamite", 17, {  }, { 1 }, {  }, {  }, {  } },
	----{amFirePunch, "Shoryuken", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amHellishBomb, "Hellish Bomb", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amWhip, "Whip", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBaseballBat, "BaseballBat", 9, {  }, { 1 }, {  }, {  }, {  } },
	----{amMortar, "Mortar", 8, {  }, { 1 }, {  }, {  }, {  } },
	----{amCake, "Cake", 20, {  }, { 1 }, {  }, {  }, {  } },
	----{amWatermelon, "Watermelon", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amDrill, "Drill", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBallgun, "Ballgun", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amMolotov, "Molotov", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amBirdy, "Birdy", 15, {  }, { 1 }, {  }, {  }, {  } },
	----{amRCPlane, "RC Plane", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amGasBomb, "Old Limburger", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amFlamethrower, "Flamethrower", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amSMine, "Sticky Mine", 10, {  }, { 1 }, {  }, {  }, {  } },
	----{amSnowball, "Snowball", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirAttack, "Air Attack", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amMineStrike, "Mine Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amDrillStrike, "Drill Strike", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amNapalm, "Napalm", 12, {  }, { 1 }, {  }, {  }, {  } },
	----{amAirMine, "AirMine", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amKnife, "Knife", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amBlowTorch, "BlowTorch", 4, {  }, { 1 }, {  }, {  }, {  } },
	----{amPickHammer, "PickHammer", 4, {  }, { 1 }, {  }, {  }, {  } },
	{amSeduction, "Life Limit-plus", 2, {  }, { 0.04 }, {  }, {  }, {  } },
	----{amParachute, "Parachute", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amGirder, "Girder", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amSwitch, "Switch", 3, {  }, { 1 }, {  }, {  }, {  } },
	----{amLowGravity, "Low Gravity", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraDamage, "Extra Damage", 35, {  }, { 1 }, {  }, {  }, {  } },
	{amRope, "Defuse-o-Miss", 2, {  }, { 0.00032 }, {  }, {  }, {  } },
	----{amInvulnerable, "Invulnerable", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amExtraTime, "Extra Time", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLaserSight, "Laser Sight", 5, {  }, { 1 }, {  }, {  }, {  } },
	{amVampiric, "Vampiric Intake", 2, {  }, { 0.01 }, {  }, {  }, {  } },
	----{amJetpack, "Jetpack", 6, {  }, { 1 }, {  }, {  }, {  } },
	----{amPortalGun, "Portal Gun", 20, {  }, { 1 }, {  }, {  }, {  } },
	{amResurrector, "Health Restoration", 2, {  }, { 0.05 }, {  }, {  }, {  } }
	----{amTeleport, "Teleport", 30, {  }, { 1 }, {  }, {  }, {  } },
	----{amLandGun, "Land Gun", 7, {  }, { 1 }, {  }, {  }, {  } },
	----{amTardis, "Tardis", 5, {  }, { 1 }, {  }, {  }, {  } },
	----{amIceGun, "IceGun", 25, {  }, { 1 }, {  }, {  }, {  } },
	----{amRubber, "Rubber", 8, {  }, { 1 }, {  }, {  }, {  } }
	}
}
local FoundryDeckMsg = {
	[1] = "Classic Foundry Deck" ,
	[2] = "Super Foundry Deck" ,
	[3] = "Mega Foundry Deck" , 
	[4] = "Omega Foundry Deck" ,
	[5] = "UltiMate Foundry Deck" ,
}
local TechnocoreDeckMsg = {
	[1] = "Workshop Technocore Deck" ,
	[2] = "Laboratory Technocore Deck" ,
	[3] = "" , 
	[4] = "" ,
	[5] = "" ,
}
local TradecentreDeckMsg = {
	[1] = "Market Tradecentre Deck" ,
	[2] = "RnD Tradecentre Deck" ,
	[3] = "" , 
	[4] = "" ,
	[5] = "" ,
}
local ShowcaseDeckMsg = {
	[1] = "Mirror Showcase Deck" ,
	[2] = "Pricelist Showcase Deck" ,
	[3] = "" , 
	[4] = "" ,
	[5] = "" ,
}
local MutationSet = {
	{1, "The Dead", "Sleepwalker", 10, 0, 5}, 
	{2, "The Corpse", "Nega-Sleepwalker", 10, 0, 5}, 
	{3, "The Holloween", "fr_pumpkin", 10, 0, 5},
	{4, "The Eater", "Nega-fr_pumpkin", 10, 0, 5},
	{5, "The Melting", "snowhog", 25, 0, 5},
	{6, "The Coldsmiler", "Nega-snowhog", 25, 0, 5},
	{7, "The Decayed", "Zombi", 50, 0, 5},
	{8, "The Tainted", "Nega-Zombi", 50, 0, 5},
	{9, "The Sluggon", "scif_BrainSlug2", 75, 0, 5},
	{10, "The Abberation", "Nega-scif_BrainSlug2", 75, 0, 5},
	{11, "The Flesher", "scif_rdKryten", 100, 0, 5},
	{12, "The Bloodseeker", "Nega-scif_rdKryten", 100, 0, 5},
	{13, "The Catcher", "scif_swJoruusCBaoth", 100, 0, 5},
	{14, "The Soulstealer", "Nega-scif_swJoruusCBaoth", 100, 0, 5},
	{15, "The Boney", "Skull", 150, 0, 5},
	{16, "The SkullCrusher", "Nega-Skull", 150, 0, 5},
	{17, "The Killowny", "WhySoSerious", 175, 1, 10},
	{17, "The Slaugther", "Nega-WhySoSerious", 175, 1, 10},
	{19, "The Assimilator", "scif_stborgdrone4", 200, 1, 10},
	{20, "The Orion", "Nega-scif_stborgdrone4", 200, 1, 10},
	{21, "The Abomination", "scif_serReaverHog", 200, 1, 10},
	{22, "The Meat", "Nega-scif_serReaverHog", 200, 1, 10},
	{23, "The Cursed", "scif_swDarthBane", 225, 1, 10},
	{24, "The Bane", "Nega-scif_swDarthBane", 225, 1, 10},
	{25, "The Draem", "draculakz", 250, 1, 10},
	{26, "The Dreadlord", "Nega-draculakz", 250, 1, 10},
	{27, "The Victim", "scif_hs_terezi", 300, 1, 10},
	{28, "The Doomned", "Nega-scif_hs_terezi", 300, 1, 10},
	{29, "The Hellix", "scif_swDarthMaul", 400, 1, 10},
	{30, "The Helliz", "Nega-scif_swDarthMaul", 400, 1, 10},
	{31, "The Abyss", "mv_Venom", 500, 1, 10},
	{32, "The Finalistic", "Nega-mv_Venom", 500, 1, 10},
	{41, "Good", "angel", 1000, 1, 25} -- 10th ZBoss
}
local ZPowerSet = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
}
local ColourSet = {
	-- RGBA Format Colours
	0x000000ff, -- black
	0xffffffff, -- White
	0xff0000ff, -- Red
	0x00ff00ff, -- Green
	0x0000ffff, -- Blue
	0xffff00ff, -- Yellow
	0xff00ffff, -- Purple
	0x00ffffff, -- Teal
	0x505050ff, -- Grey 50%
	0x757575ff, -- Grey 75%
}


-- UniverseVariable [UV]
local WeaponArrayBots = {amGrenade, amClusterBomb, amBazooka, amBee, amShotgun, amDEagle, amDynamite, amFirePunch, amWhip, amBaseballBat, amAirAttack, amMortar, amKamikaze, amCake, amWatermelon, amDrill, amSniperRifle, amMolotov, amGasBomb, amSineGun, amSMine, amHammer}
local WeaponArray = {amGrenade, amClusterBomb, amBazooka, amBee, amShotgun, amMine, amDEagle, amDynamite, amFirePunch, amWhip, amBaseballBat, amAirAttack, amMineStrike, amMortar, amKamikaze, amCake, amWatermelon, amHellishBomb, amNapalm, amDrill, amBallgun, amRCPlane, amSniperRifle, amMolotov, amPiano, amGasBomb, amSineGun, amFlamethrower, amSMine, amHammer, amDrillStrike, amKnife, amAirMine }
-- 33 Total Damage Weapon
local UtilityArrayBotsAll = {amInvulnerable, amVampiric, amExtraDamage, amKamikaze}
local UtilityArrayBots = {amInvulnerable, amVampiric, amKamikaze}
local UtilityArray = {amPickhammer, amSkip, amRope, amParachute, amBlowtorch, amGirder, amTeleport, amSwitch, amSeduction, amLowGravity, amExtraDamage, amInvulnerable, amExtraTime, amLaserSight, amVampiric, amJetpack, amBirdy, amPortalGun, amResurrector, amSnowball, amTardis, amLandGun, amIceGun, amRubber}
-- 24 Total Support Utility
---- 57 Total Available Tool and Weapon Included Removed Ones

			-- "Our Power Is what Called 'Destroyer' "
--[[
1 The Avolution [Swimmer, Escaper]
2 The Epidemic [Swimmer, Escaper, Virus]
3 The Pudge [Swimmer, Virus, Boomer, Havoc]
4 The Blazelord [Swimmer, Unstable, Blazer, Hellion]
5 The Juggernaut [Swimmer, Graviton, Adaman, Overpower, Blazer]
6 The Glum Reaper [Swimmer, Reaper, Unstable, Escaper, Spacemaster]
7 The Sorrow [Swimmer, Piercer, Graviton, Doomlord, Spacemaster, Destro]
8 The BlackDemon [Swimmer, Havoc, Forcer, Destro, Deathbringer, Blinkman]
9 The Ultrafinitism [Swimmer, Apoclance, Forcer, Adaman, Blinkman, Deathbringer, Destro]
10 Good [ALL]
			-- "The true Boss is 'Ourself' which still have another King Above Above Above and Above which ended at 'God',,, Consider Grateful as you was a Boss"
The Escaper
The Virus
The Boomer
The Swimmer
The Blazer
The Unstable
The Havoc
The Graviton
The DoomLord
The Hellion
The Overpower
The Piercer
The Adaman
The Spacemaster
The Destro
The Deathbringer
The Reaper
The Forcer
The Blinkman
The Apoclance
--]]
			-- "If You only use Power For Free Will,,, Then You Are The Weakest Being in Universe"

local ZIsEscaper = {}
local ZIsVirus = {}
local ZIsBoomer = {}
local ZIsSwimmer = {}
local ZIsBlazer = {}
local ZIsUnstable = {}
local ZIsHavoc = {}
local ZIsGraviton = {}
local ZIsDoomLord = {}
local ZIsHellion = {}
local ZIsOverpower = {}
local ZIsPiercer = {}
local ZIsAdaman = {}
local ZIsSpacemaster = {}
local ZIsDestro = {}
local ZIsDeathbringer = {}
local ZIsReaper = {}
local ZIsForcer = {}
local ZIsBlinkman = {}
local ZIsApoclance = {}
local ZEscaper = {}
local ZVirus = {}
local ZBoomer = {}
local ZSwimmer = {}
local ZBlazer = {}
local ZUnstable = {}
local ZHavoc = {}
local ZGraviton = {}
local ZDoomLord = {}
local ZHellion = {}
local ZOverpower = {}
local ZPiercer = {}
local ZAdaman = {}
local ZSpacemaster = {}
local ZDestro = {}
local ZDeathbringer = {}
local ZReaper = {}
local ZForcer = {}
local ZBlinkman = {}
local ZApoclance = {}
local HellishSndSet = {sndHellishImpact1, sndHellishImpact2, sndHellishImpact3, sndHellishImpact4}
local ZTeamWeapon = {}
local ZWea1 = {amGrenade, amSniperRifle}
local ZWea2 = {amClusterBomb, amMolotov, amBazooka}
local ZWea3 = {amFirePunch, amShotgun, amVampiric}
local ZWea4 = {amWhip, amBee, amDEagle}
local ZWea5 = {amBaseballBat, amMortar}
local ZWea6 = {amDynamite, amGasBomb, amInvulnerable}
local ZWea7 = {amDrill, amSineGun}
local ZWea8 = {amAirAttack, amSMine}
local ZWea9 = {amCake, amExtraDamage}
local ZWea10 = {amWatermelon, amKamikaze}
-- BaseVariable [BV]
local TheGameName = ""
local TheGameVersion = ""
local TheGameAuthor = ""
local Goal = {}
local DebugMode = false
local ZHPBase = {}
local FirstHPBase = {}
local TeamDiscountBase = {}
local TeamCashStart = {}
local BotsPlayers = 0
local HumanPlayers = 0
-- SpesificVariable [SV]
-- ATR{Aug{Tot{hog1, hog2, ...}, Base{hog1, hog2, , ...}, HLV{hog1, hog2, ...}, Upg{hog1, hog2, ...}, Buff{hog1, hog2, ...}, GLB{hog1, hog2, ...}}, Abs{...{...}}, ...}
local ATR = {}
ATR.Aug = {} ; ATR.Aug.Tot = {} ; ATR.Aug.Base = {} ; ATR.Aug.HLV = {} ; ATR.Aug.Upg = {} ; ATR.Aug.UpgLv = {} ; ATR.Aug.Buff = {} ; ATR.Aug.GLB = {}
ATR.Res = {} ; ATR.Res.Tot = {} ; ATR.Res.Base = {} ; ATR.Res.HLV = {} ; ATR.Res.Upg = {} ; ATR.Res.UpgLv = {} ; ATR.Res.Buff = {} ; ATR.Res.GLB = {}
ATR.Vam = {} ; ATR.Vam.Tot = {} ; ATR.Vam.Base = {} ; ATR.Vam.HLV = {} ; ATR.Vam.Upg = {} ; ATR.Vam.UpgLv = {} ; ATR.Vam.Buff = {} ; ATR.Vam.GLB = {}
ATR.Abs = {} ; ATR.Abs.Tot = {} ; ATR.Abs.Base = {} ; ATR.Abs.HLV = {} ; ATR.Abs.Upg = {} ; ATR.Abs.UpgLv = {} ; ATR.Abs.Buff = {} ; ATR.Abs.GLB = {}
ATR.Cri = {} ; ATR.Cri.Tot = {} ; ATR.Cri.Base = {} ; ATR.Cri.HLV = {} ; ATR.Cri.Upg = {} ; ATR.Cri.UpgLv = {} ; ATR.Cri.Buff = {} ; ATR.Cri.GLB = {}
ATR.CriCha = {} ; ATR.CriCha.Tot = {} ; ATR.CriCha.Base = {} ; ATR.CriCha.HLV = {} ; ATR.CriCha.Upg = {} ; ATR.CriCha.UpgLv = {} ; ATR.CriCha.Buff = {} ; ATR.CriCha.GLB = {}
ATR.Mis = {} ; ATR.Mis.Tot = {} ; ATR.Mis.Base = {} ; ATR.Mis.HLV = {} ; ATR.Mis.Upg = {} ; ATR.Mis.UpgLv = {} ; ATR.Mis.Buff = {} ; ATR.Mis.GLB = {}
ATR.MisGTable = {}
ATR.RecoveryStore = {}
ATR.AugOut = 0 ; ATR.ResOut = 0 ; ATR.VamOut = 0 ; ATR.AbsOut = 0 ; ATR.CriOut = 0 ; ATR.MisOut = 0 ; 
local Swimmer = {}
local SwimmerHPFirst = {}
local SwimmerHPNow = {}
local SwimmerHPTemp = {}
local SwimmerDmgPool = {}
local SwimmerHPNext = {}
-- TempVariable [TV]
local x = 0
local y = 1
local z = -1
local zzz = 0
local Text1 = ""
local Text2 = ""
local Bol1 = true
local Bol2 = false
local TextX = {}
local CH = nil
local IsBot = {}
local ZHPTemp = {}
local amount = 0
local upg = nil
local tec = nil
-- LocalVariable [LV]
local LvSpecialDmgTag = nil
local ToNextLevel = {}
local CashTag = nil
local AmmoNumberDiscount = 0
local ZHPAddition = {}
-- PermaVariable [PV]
local TotHogs = 0
local SayMannerA = SAY_THINK
local SayMannerB = SAY_SAY
local SayMannerC = SAY_SHOUT
local TeamCashFactor = {}
local PresetText1 = "[Press ESC To Show This or Hide This]"
-- GlobalVariable [GV]
local AllHogs = {}
local AllTeams = {}
local AllClans = {}
local PlagueGrave = {}
local PlagueZ = {}
local ZLevel = {}
local TEAMS = {}
local ZMutation = {}
local TeamCashSetup = {}
local TeamDiscount = {}
local MaxHP = {}
local TeamWeaponZ = {}
local KillCountZ = 0
local TeamTotKillCount = {}
local TeamZKillCount = {}
local TotTurns = 0
local HogsInTeam = {}
local HogAttackCount = 0
-- UNSORTED IS BELOW THIS
-- This what we call : Lazy XD
local SkipBotReplacement = nil
local HogLastTurn = nil
local WeaponaryHasGiven = {}
local AutoSelectWea = true
local SwimmerWaterDamage = 50
local TheScore = {}
local ScoreTag = nil
local BuySound = false
local TheTag = nil
local HumanPlayersNow = 0
local AllHogsAbsolute = {}
local TPGears = {}
local TPTeams = {}
local TPClans = {}
local TimeTot = {}
TimeTot.Absolute = 0
TimeTot.x10 = 0
TimeTot.x100 = 0
TimeTot.x1000 = 0
local KillStreak = {}
local KillStrakSFXvtg = nil
local TotBonusTarget = 0
local ULevel = {}
local ULVExp = {}
local ULVTiers = {}
local ULVToNext = {}
local ULVToNextTot = {}
local MyLevelSFXRunning = false
local ZVirus = {}
local ZIsVirus = {}
local GLBTime = {}
GLBTime.Hold = {}
GLBTime.Hold.x1 = {}
GLBTime.Hold.x20 = {}
GLBTime.Hold.x100 = {}
GLBTime.Hold.x1000 = {}
GLBTime.Hold.x5000 = {}
GLBTime.Pool = {}
GLBTime.Pool.x1 = 0
GLBTime.Pool.x20 = 0
GLBTime.Pool.x100 = 0
GLBTime.Pool.x1000 = 0
GLBTime.Pool.x5000 = 0
local Standard = 0
local Hog = nil
local MWeapon = {}
MWeapon.Team = {}
MWeapon.Team.Ammo = {}
MWeapon.Team.Used = {}
local GLBChanceAccuracy = 1000000
local AllGears = {}
local KWait = {}
KWait.Exe = {}
KWait.Exe.Listed = {}
KWait.Exe.Link = {}
KWait.Exe.ID = {}
KWait.Exe.LinkValSet = {}
KWait.Exe.Repeater = {}
KWait.ExeArray = {}
KWait.ExeArray.Listed = {}
KWait.ExeArray.ExeSet = {}
KWait.ExeArray.ValSet = {}
KWait.ExeArray.Repeater = {}
local MuzzlerAvailable = 1
local MuzzlerOn = 0
local MinigunAvailable = 1
local MinigunOn = 0
local RapidSurpressOn = 0

local TeamOf =  nil
local TeamCash = {}
local BMStarterAvailable = true
local BMStarter = false
local FoundryOn = false
local TechnocoreOn = false
local TradecentreOn = false
local BuyTier = 1
local Price = 0
local AmmoNumber = 1
local TeamWeapon = {}
local PreciseOn = false
local Deck = 0
local Deck2Shortcut = false

local ArsenalUnlockerRapidKeyGate = 0
local ArsenalUnlockerOn = false

--[[
Standard = ( ( HPBase * 2.5 ) + ( math.sqrt( ( BotsPlayers - HumanPlayer ) ^ 2) * 100 ) + ( TotTeams * 100 ) + ( TotClans * 100 )
CashStart = Standard * 100
ULevelAdd = Standard * 10 + Standard * ( HLevel * 5 ) + Standard * ( KillStreak * 5 )
ULevelTiers[1] = Standard * 50

		-- "If Everything going Blurry,,, Don't Confuse,,, its just an Obstacle in our life,,, Try to look into the mirror..."
-- -- --
		-- "Forget is simple,,, Remember is the Hard Difficulty in this game"
-- -- Little-Note-Reminder
-- SetAmmo(ammoType, count, probability, delay, numberInCrate)
		-- "Remind yourself about your own Behavior before your death come more closer"
-- -- --
		-- "List of To-Do : Sin, Sin, Goodness ... 2:1"
-- -- -- The List of The Hall
-- -- The Foundry
-- The Armory
-- The Blacksmith --COMING SOON!!!
-- -- The TechnocoreSet
-- The Workshop
-- The Laboratory --COMING SOON!!!
-- -- The TradeCentre
-- The Market
-- The RnD --COMING SOON!!!
-- -- The Showcase
-- The Pricelist
-- The Mirror --AVAILABLE!!!
		-- "We have know what we are ??? Do We ???"
-- -- --
		-- "You don't need to Remember Everything,,, Just Understand on it..."

		-- "Privacy is Absolute,,, Otherwise like Chaos, is Choice"
----------------------------------------------------------------------------------------------------------------------------- PLEASE READ COPYRIGHTS LICENSE ABOVE BEFORE CONTINUE
		-- "Force Anybody to do what we want is Futile, Cuz everybody use hard shell in their head,,, Try to ask and Request,,,"
--]]
		-- "Don't Give Up Till You Reach The End"
		
 -- --  -- --  -- --  -- --  -- --  -- --  -- --  -- --  -- --  -- --  THE ACTIONS
		
		-- "What have you do in your life ??? Theory or Facts ???"
		
-- -- -- -- -- On Gear What Galaxy System -- Total Function in This Galaxy [2016/12/6] = 6

function onGearAdd(gear)
	local gt = GetGearType(gear)
	table.insert(AllGears, gear)
	if gt == gtHedgehog then
		ZHPBase[gear] = GetHealth(gear)
		-- Set "is that Bot ???" for this new guy,,,
		if GetHogLevel(gear) > 0 then
			-- Set IsBot
			IsBot[gear] = true
			-- Plague Effect
			table.insert(PlagueZ, gear)
			-- Initial Behavior
			SetEffect(gear, heResurrectable, 1);
			SetEffect(gear, hePoisoned, 1);
			-- ZLevel Init
			ZLevel[gear] = 1
			-- Number of Bots
			BotsPlayers = BotsPlayers + 1
		else
			-- He is a human
			IsBot[gear] = false
			-- Numbers of Human
			HumanPlayers = HumanPlayers + 1
		end
		-- Is this guys is a Swimmer ??? setup here
		SwimmerHPFirst[gear] = GetHealth(gear)
		Swimmer[gear] = false
		-- Setup ATR.RecoveryStore for him
		ATR.RecoveryStore[gear] = 0
		-- Inserting to Tables
		table.insert(AllHogs, gear)
		table.insert(AllHogsAbsolute, gear)
		table.insert(AllClans, GetHogClan(gear))
		TeamOf =  GetHogTeamName(gear)
		if Founder(nil, TeamOf, AllTeams, nil, nil) == 0 then
			table.insert(AllTeams, TeamOf)
		end
		-- Hoggies Things Set
		TotHogs = TotHogs + 1
	end
	-- Set Graves to Plague Graves
	if gt == gtGrave then
		table.insert(PlagueGrave, gear)
	end
	-- MegaWeapon
	MWeaGearAdd(gear)
end

function onGearDamage(gear, damage)
	if GetGearType(gear) == gtHedgehog and GetHealth(CurrentHedgehog) ~= nil then
		-- Calling Attributes Eexecutor
		ATRAug(CurrentHedgehog, gear, damage)
		ATRRes(gear, gear, damage)
		ATRVam(CurrentHedgehog, CurrentHedgehog, damage)
		ATRAbs(gear, gear, damage)
		ATRCri(CurrentHedgehog, gear, damage)
		-- The Swimmer HP Business
		SwimmerHPNow[gear] = GetHealth(gear)
		SwimmerHPNext[gear] = SwimmerHPNow[gear] - (damage)
		-- The Score
		if gear ~= CurrentHedgehog and GetHealth(CurrentHedgehog) ~= nil and IsBot[CurrentHedgehog] ~= true then
			TheScoreAdd((damage) * 100, TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog))
			ULevelSys(CurrentHedgehog, (damage) * 50, nil, nil)
		end
		if GetHealth(gear) ~= nil and IsBot[gear] ~= true then
			ULevelSys(gear, (damage) * ( 50 * 0.5 ), nil, nil)
		end
	end
	if RapidSurpressOn > 0 then
		DamageLoss(gear, damage * 0.858)
	end
end

function DamageLoss(gear, dmgloss)
	if dmgloss > 0 then
		SetHealth(gear, GetHealth(gear) + dmgloss)
		if dmgloss >= 1 then
			DamageTag(dmgloss, GetX(gear) + 120, GetY(gear) + 0, 0x00ff00ff)
		end
	end
end

function onGearResurrect(gear)
	Text1 = GetHogName(gear)
	TeamOf =  GetHogTeamName(gear)
	-- The Swimmer
	ToNextLevel[gear] = false
	if Swimmer[gear] == true then
		if 	SwimmerHPNext[gear] > 0 then
			SetHealth(gear, SwimmerHPNext[gear] - SwimmerWaterDamage)
			-- Debug for it ? or Show the News only ? ok,,, both of it
			HogSay(gear, "Water is my Friend", HogSayMannerC)
			ToNextLevel[gear] = false
		else
			SetHealth(gear, SwimmerHPFirst[gear])
			-- ZLevel Setup
			ZLevel[gear] = ZLevel[gear] + 1
			ZMutation[gear] = ZMutation[gear] + 1
			ToNextLevel[gear] = true
		end
	else
		-- ZLevel Setup
		ZLevel[gear] = ZLevel[gear] + 1
		ZMutation[gear] = ZMutation[gear] + 1
		ToNextLevel[gear] = true
	end
	CH = CurrentHedgehog
	-- Idk what this doing here,,,
	SwimmerHPFirst[gear] = GetHealth(gear)
	SwimmerHPNow[gear] = SwimmerHPFirst[gear]
	SwimmerHPTemp[gear] = SwimmerHPNow[gear]
	-- Bot Setup
	if IsBot[gear] == true then
		-- ZTeamWeapon
		ZNowWeaponarySet(gear)
		-- ATR.RecoveryStore reset
		ATR.RecoveryStore[gear] = 0
		if ToNextLevel[gear] == true then
			-- Leveling Up of Bots
			BotLVUp(gear)
			-- ZMutation
			ReZMutation(gear)
			-- KillCount
			KillcountSet()
			-- New Level for Bot SFX ,,, Credit : Mutant :D
			BotLVUpSFX(gear)
			-- The Score
			TeamOf =  GetHogTeamName(CurrentHedgehog)
			if GetHealth(CurrentHedgehog) ~= nil then
				TheScoreAdd(TeamTotKillCount[TeamOf] * 2000, TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog))
			end
			-- Killing Bounty
			if gear ~= CurrentHedgehog then
				KillingBounty1(gear)
			end
			SpawnGoldbag(1)
			--
			GiveZPower(gear)
		end
	end
end

function onGearDelete(gear)
	-- Killing Bounty
	KillingBounty1(gear)
	-- Plagues
	if GetGearType(gear) == gtHedgehogs then
		if GetHogLevel(gear) == 0 then
			-- Remove human's little hoggie from table
			table.remove(AllHogs, gear)
			table.remove(ATR.RecoveryStore, gear)
		end
	end
	-- Remove Graves that already gone
	if GetGearType(gear) == gtGrave then
		table.remove(PlagueGrave, gear)
	end
	if GetGearType(gear) == gtCase and band(GetGearMessage(gear), gmDestroy) ~= 0 then
		TeamOf =  GetHogTeamName(CurrentHedgehog)
		PickupCrate(gear)
	end
	if GetGearType(gear) == gtTarget and GetHealth(CurrentHedgehog) ~= nil then
		GotGoldbag(CurrentHedgehog)
	end
end

function onHogAttack(am)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	MWeaGate(am)
	-- Decrease Weaponary Stock in Team's Weaponary when it is used,,, i won't let anyone get FREE From-NoWhere Weapon in INSTA !
	for k,v in pairs(TeamWeapon[TeamOf]) do
		if v[1] == am then
			TeamWeapon[TeamOf][k][4] = TeamWeapon[TeamOf][k][4] - 1
			if TeamWeapon[TeamOf][k][4] <= 0 then
				TeamWeapon[TeamOf][k][4] = 0 
			end
		end
	end
	for k,v in pairs(FoundrySet) do
		for kk,vv in pairs(v) do
			if am == vv[1] then
				if vv[4][TeamOf] == nil then vv[4][TeamOf] = 0 end
				if vv[4][TeamOf] > 0 then
					vv[4][TeamOf] = vv[4][TeamOf] - 1
				end
			end
		end
	end
	for k,v in pairs(TechnocoreSet) do
		for kk,vv in pairs(v) do
			if am == vv[1] then
				if vv[4][TeamOf] == nil then vv[4][TeamOf] = 0 end
				if vv[4][TeamOf] > 0 then
					vv[4][TeamOf] = vv[4][TeamOf] - 1
				end
			end
		end
	end
	for k,v in pairs(TradecentreSet) do
		for kk,vv in pairs(v) do
			if am == vv[1] then
				if vv[4][TeamOf] == nil then vv[4][TeamOf] = 0 end
				if vv[4][TeamOf] > 0 then
					vv[4][TeamOf] = vv[4][TeamOf] - 1
				end
			end
		end
	end
	-- Switch reset and set the zombie's valid weaponry
	if am == amSwitch then
		-- Give Weaponary ,,,
		if IsBot[CurrentHedgehog] == true then
			-- Bots Weaponary
			ZNowWeaponarySet(CurrentHedgehog)
		elseif IsBot[CurrentHedgehog] == false then
			-- Give Weaponary that Team Has
			ReturnWeapon()
		end
		BMStarterAvailable = false
	else
		BMStarterAvailable = true
	end
	-- Trace how many CurrentHedgehog use Attack
	HogAttackCount = HogAttackCount + 1
	-- Reset SkipBotReplacement
	SetEffect(SkipBotReplacement, heInvulnerable, 0)
	SkipBotReplacement = nil
end

function TP(object, mode, class, property, become, add, subtract)
	local x = object ; local xx = mode ; local xxx = class ; local xxxx = property ; local xxxxx = become ; local xxxxxx = add ; local xxxxxxx = subtract ;
	local y = {} ; local z ; local zz ; local zzz ;
	local c = 0
	if xxx == 1 then
		y = TPGears
	elseif xxx == 2 then
		y = TPTeams
	elseif xxx == 3 then
		y = TPClans
	end
	if xxxxxx == nil then
		zz = 0
	else
		zz = xxxxxx
	end
	if xxxxxxx == nil then
		zzz = 0
	else
		zzz = xxxxxxx
	end
	for a, b in pairs(y) do
		if xxxxx == nil then
			z = b[xxxx]
		else
			z = xxxxx
		end
		if a == x then
			b[xxxx] = z
			b[xxxx] = b[xxxx] + zz
			b[xxxx] = b[xxxx] + zzz
			c = c + 1
		end
	end
	if xx == 1 and c == 0 then
		y[x] = { [xxxx] = z }
	elseif xx == 2 then
		if y[x] == nil then
			return nil
		else
			return y[x][xxxx]
		end
	end
end

-- -- -- -- -- The Points Galaxy Systems -- Total Function in This Galaxy [2016/12/6] = 10

function TheCash(team, tagx, tagy, adding, subtract, become, message)
	-- My Own Hadwork [Copy Pasta is Prohibited !!!] for adding, or subtracting, or instead reset it to an EXACT Value of Cash in the targeted team,,, call it then forget it,,,
	local x = team ; local xx = adding ; local xxx = subtract ; local xxxx = become ; local xxxxx = message ;
	local y ; local yy ; local yyy ; local z ; local zz ; local zzz ;
	y = TeamCash[x]
	if xx == nil then
		yy = 0
	else
		yy = xx
	end
	if xxx == nil then
		yyy = 0
	else
		yyy = xxx
	end
	z = y
	z = z + yy
	z = z - yyy
	if xxxx == nil then
		yyyy = z
	else
		yyyy = xxxx
	end
	z = yyyy
	TeamCash[x] = z
	TeamCash[x] = math.floor(TeamCash[x])
	zz = math.floor(yy - yyy)
	if xxxxx == nil then
		xxxxx = 1
	end
	if zz >= 1 and xxxxx > 0 then
		DamageTag(zz, tagx - 40, tagy, 0xffff00ff)
	end
end

function TheScoreAdd(val, team, tagx, tagy, presssfx)
	-- Score Addition System,,, which adding and call the preset Damage Tag for Score only
	TeamOf =  team
	x = math.floor(val / 5000)
	if presssfx ~= nil then
		y = ( val / presssfx ) / x
		x = math.floor((val / presssfx) / 5000)
	else
		y = val / x
		DamageTag(val, tagx - 120, tagy, 0xff7500ff)
	end
	KWaitExe(1500, ScoreAddSFX, {x * 2, CurrentHedgehog, y, nil, 500, 1000})
end

function ScoreAddSFX(ntimes, hog, score, waitdelay, mathranMin, mathranMax)
	-- ScoreAddSFX is a pen pal of The Score Add
	if ntimes > 0 then
		TeamOf =  GetHogTeamName(hog)
		if GetHealth(hog) ~= nil then
			-- As the Friend of GoldSFX ...
			for n=1,ntimes * 3 do
				x = math.random(1, 2)
				if x == 1 then
					PlaySound(sndPiano2)
				elseif x == 2 then
					PlaySound(sndPiano4)
				end
				local ScoreAddvgt = AddVisualGear(GetX(hog) + math.random(-10*n, 10*n), GetY(hog) - 200 - math.random(10*n, 40*n), vgtSmoke, nil, true)
				if ntimes >= 4 then
					SetVisualGearValues(ScoreAddvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, ColourSet[math.random(1, 10)])
				elseif ntimes >= 3 then
					SetVisualGearValues(ScoreAddvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, ColourSet[math.random(1, 5)])
				elseif ntimes <= 2 then
					SetVisualGearValues(ScoreAddvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff5000ff)
				end
			end
			TheScore[TeamOf] = TheScore[TeamOf] + score
		end
		-- Recalling this again and again
		if waitdelay == nil then
			KWaitExe(math.random(mathranMin, mathranMax), ScoreAddSFX, {ntimes - 1, hog, score, waitdelay, mathranMin, mathranMax})
		elseif waitdelay ~= nil then
			KWaitExe(waitdelay, ScoreAddSFX, {ntimes - 1, hog, score, waitdelay, mathranMin, mathranMax})
		end
	end
end

function DamageTag(val, X, Y, colour)
	-- An Independence Damage Tag Creator System /lel ,,, i making everything more complicated XC
	TheTag = AddVisualGear(X, Y, vgtHealthTag, val, true)
	SetVisualGearValues(TheTag, nil, nil, nil, nil, nil, nil, nil, nil, nil, colour)
end

function KillingBounty1(hog)
	if GetHealth(CurrentHedgehog) ~= nil then
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	end
	-- Is the victim is bot ??? it should be different for humans,,,
	if IsBot[hog] == true and GetHealth(CurrentHedgehog) ~= nil then
		KillingBounty2(hog, ZLevel[hog] * 2000 + FirstHPBase[hog] * 10 + TeamCashStart[TeamOf] * 0.025 + TotHogs * 25 + BotsPlayers * 500 + TotTurns * 50 + 5000)
	end
	-- This one is for human player == victim
	if IsBot[hog] == false and (hog) ~= CurrentHedgehog and GetHogTeamName(hog) ~= GetHogTeamName(CurrentHedgehog) and GetHealth(CurrentHedgehog) ~= nil and GetHealth(hog) ~= nil then 
		KillingBounty2(hog, ULevel[hog] * 2000 + FirstHPBase[hog] * 10 + TeamCashStart[TeamOf] * 0.05 + TotHogs * 50 + HumanPlayers * 250 + TotTurns * 50 + 5000)
	end
end

function KillingBounty2(hog, a)
	TeamOf =  GetHogTeamName(hog)
	PlaySound(sndPiano1)
	-- Add the Cash Now
	TheCash(TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog), a)
	-- Massage
	local b = KillStreak[CurrentHedgehog] * 2500 + Standard * 2.5 * KillStreak[CurrentHedgehog] + GetHealth(CurrentHedgehog) * 10 + TeamTotKillCount[GetHogTeamName(CurrentHedgehog)] * 250 ;
	AddCaption("Killer !!! = Golds")
	AddCaption("Added some ".. a .."$ for killing a hog and + ".. b .."$ as a Cash Bonus for "..KillStreak[CurrentHedgehog] + 1 .." Killstreak !!!",GetClanColor(GetHogClan(CurrentHedgehog)),capgrpMessage2)
	-- The Score
	TheScoreAdd(a, TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog))
	-- Hurrah ?
	KillStreak[CurrentHedgehog] = KillStreak[CurrentHedgehog] + 1
	KillStreakSFX(GetX(CurrentHedgehog), GetY(CurrentHedgehog), KillStreak[CurrentHedgehog])
	-- ULevelSys
	if IsBot[CurrentHedgehog] == false then
		if IsBot[hog] == true then
			ULevelSys(CurrentHedgehog, Standard * 10 + Standard * ( ZLevel[hog] * 5 ) + Standard * ( KillStreak[CurrentHedgehog] * 5 ) , nil, nil)
		else
			ULevelSys(CurrentHedgehog, Standard * 10 + Standard * ( ULevel[hog] * 5 ) + Standard * ( KillStreak[CurrentHedgehog] * 5 ) , nil, nil)
		end
	end
end

function KillStreakSFX(X, Y, KSNow)
	-- KillStreak is Cool !!! Which Add BONUS For Every Kill in a single turn for multiple times,,, Profit is Precisely, accurate plus plus,,, what i say ?
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	-- We making some Frustating effects,,,
	for n=1,KSNow * 15 do
		KillStrakSFXvtg = AddVisualGear(X + math.random(-10*n, 10*n), Y + math.random(-10*n, 10*n), vgtSmoke, nil, true)
		SetVisualGearValues(KillStrakSFXvtg, nil, nil, nil, nil, nil, nil, nil, nil, nil, ColourSet[math.random(1, 10)])
	end
	-- And Sounds
	PlaySound(sndExplosion)
	-- Also Call GoldDiggerSFX
	local x = 0 ; x = KillStreak[CurrentHedgehog] * 2500 + ( TeamCashStart[TeamOf] * 0.05 ) * KillStreak[CurrentHedgehog] + GetHealth(CurrentHedgehog) * 10 + TeamTotKillCount[GetHogTeamName(CurrentHedgehog)] * 250 ;
	GoldSFX(KSNow, CurrentHedgehog, x / KSNow, 500 - 25 * 10, 750 - KSNow * 25, nil)
end

function GoldSFX(ntimes, hog, KSCoins, waitdelay, mathranMin, mathranMax)
	-- I Like GoldSFX ;D !!!
	if ntimes > 0 and GetHealth(hog) ~= nil then
		TeamOf =  GetHogTeamName(hog)
		-- We play sounds and adding cash too,,, what a nice guy eh ?
		PlaySound(sndPiano0)
		-- Oh,,, and Visual Gear as sugar
		for n=1,ntimes * 3 do
			if GetHealth(hog) ~= nil then
				local GoldSFXvgt = AddVisualGear(GetX(hog) + math.random(-20*n, 20*n), GetY(hog) + 100 - math.random(-20*n, 20*n), vgtExplPart, nil, true)
				SetVisualGearValues(GoldSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xffff00ff)
			end
		end
		TheCash(TeamOf, GetX(CurrentHedgehog) + math.random(-1 * (ntimes * 5), ntimes * 5), GetY(CurrentHedgehog) + math.random(-1 * (ntimes * 5), ntimes * 5), KSCoins, nil, nil)
		-- Not forgetting the Score too !!!
		if GetHealth(hog) ~= nil then
			TheScoreAdd(KSCoins, TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog))
		end
		-- Recall this for, for what i need,,,
		if waitdelay == nil then
			KWaitExe(math.random(mathranMin, mathranMax), GoldSFX, {ntimes - 1, hog, KSCoins, waitdelay, mathranMin, mathranMax})
		elseif waitdelay ~= nil then
			KWaitExe(waitdelay, GoldSFX, {ntimes - 1, hog, KSCoins, waitdelay, mathranMin, mathranMax})
		end
	end
end

function Income()
	-- will be Disabled if have more than $10000 in a team due to User's Glitch Manipulation,,, but will fully available without limit if there are no bots
	for k,v in pairs(AllHogs) do
		TeamOf =  GetHogTeamName(v)
		if GetHealth(v) ~= nil and BotsPlayers < 1 then
			GiveIncome(v, ( FirstHPBase[v] * 1 + TeamCashStart[TeamOf] * 0.005 + TotHogs * 1 + BotsPlayers * 5 + TotTurns * 5 + TeamCashStart[TeamOf] * 0.05 / HogsInTeam[TeamOf] ), 1)
		elseif GetHealth(v) ~= nil and BotsPlayers > 0 and TeamCash[TeamOf] < 10000 then
			GiveIncome(v, ( FirstHPBase[v] * 1 + TeamCashStart[TeamOf] * 0.005 + TotHogs * 1 + BotsPlayers * 5 + TotTurns * 5 + TeamCashStart[TeamOf] * 0.05 / HogsInTeam[TeamOf] ), 0)
		end
	end
end

function GiveIncome(hog, val, over)
	TeamOf =  GetHogTeamName(hog)
	-- -- Give All Team per turn Cash,,,
	-- Add the Cash Now
	TheCash(TeamOf, GetX(hog), GetY(hog), x, nil, nil, 0)
	DamageTag(val, GetX(hog) - 40, GetY(hog) + 40, 0x757500ff)
	-- Massage
	if over == 0 then
		AddCaption("Survive Each Time = Golds")
		AddCaption("Added some "..x.."$ to your Pocket,,, this is per turn and only added to team with Cash < 10000,,,",GetClanColor(GetHogClan(CurrentHedgehog)),capgrpMessage2)
	elseif over == 1 then
		AddCaption("Survive Each Time = Golds")
		AddCaption("Added some "..x.."$ to your Pocket,,, this is per turn cash bonus, because there are no Bots Player,,,",GetClanColor(GetHogClan(CurrentHedgehog)),capgrpMessage2)
	end
end

-- -- -- -- -- The Time Galaxy Systems -- Total Function in This Galaxy [2016/12/6] = 5

function onNewTurn()
	--OrichalcixNukeGate()
	-- Who take the Last Turn before this ?
	if HogLastTurn == nil then
		HogLastTurn = CurrentHedgehog
	end
	-- Show Mission Panel with a guide and or odd info in it
	NewTurnInfoPanel()
	-- ZPower : Escaper
	Escaper()
	-- HogLastTurn Line of Reset
	HogLastTurn = CurrentHedgehog
	-- HogAttackCount Reset
	HogAttackCount = 0
	-- The Total Turn was :
	TotTurns = TotTurns + 1
	-- Reset Mode to Normal,,,
	-- Neutralization
	HideWeapon()
	SetWeapon(amSkip)
	KillStreak[CurrentHedgehog] = 0
	AmmoNumber = 1
	BMStarter = false
	Deck = 0
	BMStarterAvailable = true
	-- GiveWeaponary
	HideWeapon()
	ReturnWeapon()
	GoToPlayMode()
	-- HPStock
	GiveHPStock()
	-- Income System
	Income()
	-- Title of this hog (if it is bot)
	BotsOnTheMove(CurrentHedgehog)
	-- Reset AmmoNumberDiscount
	AmmoNumberDiscountSet(1)
	-- Goldbag per Turn
	GoldbagsPerTurn()
	-- HP Max Limit
	MaxHPLimiting()
end

function onGameTick20()
	-- Spawn Plague (aka posion cloud) to all Zombie
	for m,n in pairs(PlagueZ) do
		if GetRandom(100) == 1 then
			x,y = GetGearPosition(n);
			AddGear(x, y, gtPoisonCloud, gsttmpFlag, 0, 0, 2000);
			if ZIsVirus[n] > 0 then
				AddGear(x + math.random(-50, 50), y + math.random(-50, 50), gtPoisonCloud, gsttmpFlag, 0, 0, 2000);
				AddGear(x - math.random(-50, 50), y - math.random(-50, 50), gtPoisonCloud, gsttmpFlag, 0, 0, 2000);
			end
		end
	end
	-- Spawn Plague at Graves (credit to : Poison_Graves_v2)
	for m,n in pairs(PlagueGrave) do
		if GetRandom(100) > 97 then
			x,y = GetGearPosition(n);
			AddGear(x, y, gtPoisonCloud, gsttmpFlag, 0, 0, 2000);
		end
	end
	for n,m in pairs(AllHogsAbsolute) do
		-- Custom Stats
		SendStat(siClanHealth, TheScore[GetHogTeamName(m)], GetHogTeamName(m))
		if IsBot[m] == false and GetHealth(m) ~= nil then
			HumanPlayersNow = HumanPlayersNow + 1
		end
	end
	ATRTotCore()
	for k,v in pairs(AllGears) do
		if GetHealth(CurrentHedgehog) ~= nil and ATR.MisGTable[CurrentHedgehog] == nil and CurrentHedgehog ~= nil then
			ATR.MisGTable[CurrentHedgehog] = {}
		end
		if GetHealth(CurrentHedgehog) ~= nil and ATR.MisGTable[CurrentHedgehog][v] == nil and CurrentHedgehog ~= nil then
			ATR.MisGTable[CurrentHedgehog][v] = 0
		end
		if GetHealth(CurrentHedgehog) ~= nil and ATR.MisGTable[CurrentHedgehog][v] <= 0 and CurrentHedgehog ~= nil then
			ATRMis(CurrentHedgehog, v)
			ATR.MisGTable[CurrentHedgehog][v] = 1
		end
	end
	-- Remove if a Gear is a Nil Nightmare
	for k,v in pairs(AllGears) do
		if v == nil or ( GetX(v) == nil and GetY(v) == nil ) then
			table.remove(AllGears, k)
		end
	end
	-- Remove a Troublesome Hog's Corpses
	for k,v in pairs(AllHogs) do
		if v == nil then
			table.remove(AllHogs, k)
		elseif GetHealth(v) == nil then
			table.remove(AllHogs, k)
		elseif GetX(v) == nil and GetY(v) == nil then
			table.remove(AllHogs, k)
		end
	end
end

function onGameTick()
	-- Preset, Absolute Time
	TimeTot.Absolute = TimeTot.Absolute + 1
	TimeTot.x10 = TimeTot.x10 + 1
	TimeTot.x100 = TimeTot.x100 + 1
	TimeTot.x1000 = TimeTot.x1000 + 1
	-- The KWaitExe System,,, kinda a little and tiny system which saying for now, at least than none,,,
	if #KWait.Exe.Listed > 0 then
		for a,b in pairs(KWait.Exe.Listed) do
			if KWait.Exe.Listed[a] ~= nil and KWait.Exe.Link[a] ~= nil then
				if KWait.Exe.Listed[a] <= 0 then
					KWaitExecution(KWait.Exe.Link[a], nil, KWait.Exe.LinkValSet[a], KWait.Exe.Repeater[a])
					table.remove(KWait.Exe.Link, a)
					for n=1,#KWait.Exe.LinkValSet[a] do
						table.remove(KWait.Exe.LinkValSet[a], n)
					end
					table.remove(KWait.Exe.LinkValSet, a)
					table.remove(KWait.Exe.Listed, a)
					table.remove(KWait.Exe.ID, a)
					table.remove(KWait.Exe.Repeater, a)
				else
					KWait.Exe.Listed[a] = KWait.Exe.Listed[a] - 1
				end
			end
		end
	end
	-- Anti-Error when there are no KWait in Orders
	if #KWait.ExeArray.Listed > 0 then
		-- For every Member in KWait.ExeArray.Listed
		for k,v in pairs(KWait.ExeArray.Listed) do
			-- If the Delay runs out,,, execute the Function Array
			if KWait.ExeArray.Listed[k] <= 0 then
				KWaitExecution(nil, KWait.ExeArray.ExeSet[k], KWait.ExeArray.ValSet[k], KWait.ExeArray.Repeater[k])
				-- Then remove these from existance,,, we won't recalling it everytime isn't we ???
				table.remove(KWait.ExeArray.Listed, k)
				table.remove(KWait.ExeArray.ExeSet, k)
				table.remove(KWait.ExeArray.ValSet, k)
				table.remove(KWait.ExeArray.Repeater, k)
			else
				-- Decrease the Delay until runs out
				KWait.ExeArray.Listed[k] = KWait.ExeArray.Listed[k] - 1
			end
		end
	end
end

function KWaitExecution(oneexe, exetab, valtab, repeater)
	local repeating = 1
	if repeater ~= nil then
		repeating = repeater
	end
	for m=1,repeating do
		local oneexe = oneexe
		local Tab1 = {} ; Tab1 = exetab
		local Tab2 = {} ; Tab2 = valtab
		-- There are Array,,, which execute many at once,,,
		if Tab1 == nil and oneexe ~= nil then
			Tab1 = {}
			Tab1[1] = oneexe
		elseif Tab1 ~= nil and oneexe ~= nil then
			table.insert(Tab, oneexe)
		elseif Tab1 == nil and oneexe == nil then
			break
		end
		for n=1,#Tab1 do
			if Tab1[n] ~= nil then
				-- Below this are the COMPLICATED METHOD of KWait that i actually lazy to write down ;O
				-- Idk how to do in another way,,, i have try many but found a Locked Adamantium Door...
				local x = 0
				-- Local x = Lazy
				if #Tab2[n] == x then
					Tab1[n]()
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2], Tab2[n][3])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2], Tab2[n][3], Tab2[n][4])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2], Tab2[n][3], Tab2[n][4], Tab2[n][5])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2], Tab2[n][3], Tab2[n][4], Tab2[n][5], Tab2[n][6])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2], Tab2[n][3], Tab2[n][4], Tab2[n][5], Tab2[n][6], Tab2[n][7])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2], Tab2[n][3], Tab2[n][4], Tab2[n][5], Tab2[n][6], Tab2[n][7], Tab2[n][8])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2], Tab2[n][3], Tab2[n][4], Tab2[n][5], Tab2[n][6], Tab2[n][7], Tab2[n][8], Tab2[n][9])
				end
				x = x + 1
				if #Tab2[n] == x then
					Tab1[n](Tab2[n][1], Tab2[n][2], Tab2[n][3], Tab2[n][4], Tab2[n][5], Tab2[n][6], Tab2[n][7], Tab2[n][8], Tab2[n][9], Tab2[n][10])
				end
				-- If we don't do this way,,, there will be an Error about Number of Parameter setup which ONLY Happen to Original, HW Preset Function that already exist,,, Custom Function we made CAN Take this,,, otherwise the Preset...
			end
		end
	end
end

function KWaitExe(delay, exe, valset, repeater)
	-- My Handwork [No Copy Pasta] of A System that enable us to Delay the Time then Execute a Function that was specified before the waiting proccess,,, i know this is bad, but i make at least,,, we don't have "Wait" option for now, yet ... AND THIS ISN'T WHAT 100% I WANT,,, BUT IDK HOW TO REALIZE THE TRUE ONE D;
	table.insert(KWait.Exe.Listed, delay)
	id = #KWait.Exe.Listed
	table.insert(KWait.Exe.ID, id)
	table.insert(KWait.Exe.Link, exe)
	table.insert(KWait.Exe.LinkValSet, {valset})
	local repeating = 1
	if repeater == nil then
		repeating = 1
	else repeating = repeater end
	table.insert(KWait.Exe.Repeater, repeating)
end

function KWaitExeArray(delay, exeset, valset, repeater)
	-- Insert what this function was called for into its storage system
	table.insert(KWait.ExeArray.Listed, delay)
	table.insert(KWait.ExeArray.ExeSet, exeset)
	table.insert(KWait.ExeArray.ValSet, valset)
	local repeating = 1
	if repeater == nil then
		repeating = 1
	else repeating = repeater end
	table.insert(KWait.ExeArray.Repeater, repeating)
end

-- -- -- -- -- The Attributes Galaxy System -- Total Function in This Galaxy [2016/12/6] = 11

function ATRAug(caster, target, val)
	if GetHealth(caster) ~= nil then
		ATR.AugOut = (val) * ATR.Aug.Tot[caster]
		if GetHealth(target) - (val) > 0 then
			SetHealth(target, GetHealth(target) - ATR.AugOut)
			if ATR.AugOut >= 1 then
				X,Y = GetGearPosition(target)
				DamageTag(ATR.AugOut, X + 80, Y - 40, 0xff5050ff)
				KWaitExe(250, TheScoreAdd, {ATR.AugOut * 100, TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog)})
			end
		end
	end
end

function ATRRes(caster, target, val)
	if GetHealth(caster) ~= nil then
		ATR.ResOut = (val) * ATR.Res.Tot[caster]
		if GetHealth(target) - (val) > 0 then
			SetHealth(target, GetHealth(target) + ATR.ResOut)
			if ATR.ResOut >= 1 then
				X,Y = GetGearPosition(target)
				DamageTag(ATR.ResOut, X + 160, Y - 0, 0x0000ffff)
			end
		end
	end
end

function ATRVam(caster, target, val)
	if GetHealth(caster) ~= nil then
		ATR.VamOut = (val) * ATR.Vam.Tot[caster]
		if GetHealth(target) - (val) > 0 then
			SetHealth(target, GetHealth(target) + ATR.VamOut)
			if ATR.VamOut >= 1 then
				X,Y = GetGearPosition(target)
				DamageTag(ATR.VamOut, X + 120, Y - 0, 0x00ff00ff)
			end
		end
	end
end

function ATRAbs(caster, target, val)
	if GetHealth(caster) ~= nil then
		ATR.AbsOut = (val) * ATR.Abs.Tot[caster]
		if GetHealth(target) - (val) > 0 then
			ATR.RecoveryStore[target] = ATR.RecoveryStore[target] + ATR.AbsOut
			if ATR.AbsOut >= 1 then
				X,Y = GetGearPosition(target)
				DamageTag(ATR.AbsOut, X - 80, Y - 40, 0x50ffffff)
			end
		end
	end
end

function ATRCri(caster, target, val)
	if GetHealth(caster) ~= nil then
		ATR.CriOut = 0
		if math.random(0, 1 * GLBChanceAccuracy) <= ATR.CriCha.Tot[caster] * GLBChanceAccuracy then
			ATR.CriOut = (val) * ATR.Cri.Tot[caster]
			SetHealth(target, GetHealth(target) - ATR.CriOut)
			if ATR.CriOut >= 1 then
				X,Y = GetGearPosition(target)
				DamageTag(ATR.CriOut, X - 80, Y - 0, 0xff0000ff)
				for n=1,5 do
					PlaySound(sndPiano3)
				end
				KWaitExe(250, TheScoreAdd, {ATR.CriOut * 100, TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog)})
			end
		end
	end
end

function ATRMis(caster, target, val)
	if GetHealth(caster) ~= nil then
		if InGMissList(target) == true then
			if GetDistance(caster, target) <= 75 then
				X,Y = GetGearPosition(caster)
				local x = math.random(0, 1 * GLBChanceAccuracy)
				if x <= ATR.Mis.Tot[caster] * GLBChanceAccuracy then
					DeleteGear(target)
					DamageTag(0, X - 200, Y - 0, 0xff0050ff)
				else
					DamageTag(x, X - 200, Y - 0, 0xff0050ff)
				end
			end
		end
	end
end

function ATRTotCore()
	for k,v in pairs(AllHogs) do
		ULVToNext[v] = ULVTiers[ULevel[v] + 1] - ULVExp[v]
		ULevelSys(v, 0, 0, nil)
		local a = 0
		for l,w in pairs(ATR) do
			a = 0
			if w ~= ATR.RecoveryStore and w ~= ATR.AugOut and w ~= ATR.ResOut and w ~= ATR.VamOut and w ~= ATR.AbsOut and w ~= ATR.CriOut and w ~= ATR.MisOut and w ~= ATR.MisGTable then
				for m,x in pairs(w) do
					if x ~= ATR[l].Tot and x ~= ATR[l].UpgLv then
						a = a + ATR[l][m][v]
					end
				end
				ATR[l].Tot[v] = a ; a = 0
			end
		end
	end
end

function GetDistance(gear1, gear2, x1, y1, x2, y2)
	local X1 = 0 ; local X2 = 0 ; local Y1 = 0 ; local Y2 = 0 ;
	if x1 ~= nil then X1 = x1 end ; if y1 ~= nil then Y1 = y1 end ; if x2 ~= nil then X2 = x2 end ; if y2 ~= nil then Y2 = y2 end ;
	if gear1 ~= nil and GetGearType(gear1) == gtHedgehog then
		if gear1 ~= nil and GetHealth(gear1) ~= nil then
			X1,Y1 = GetGearPosition(gear1)
		end
	elseif gear1 ~= nil and GetGearType(gear1) ~= gtHedgehog then
		if gear1 ~= nil then
			X1,Y1 = GetGearPosition(gear1)
		end
	end
	if gear2 ~= nil and GetGearType(gear2) == gtHedgehog then
		if gear2 ~= nil and GetHealth(gear2) ~= nil then
			X2,Y2 = GetGearPosition(gear2)
		end
	elseif gear2 ~= nil and GetGearType(gear2) ~= gtHedgehog then
		if gear2 ~= nil then
			X2,Y2 = GetGearPosition(gear2)
		end
	end
	if X1 == nil then X1 = 0 end ; if X2 == nil then X2 = 0 end ; if Y1 == nil then Y1 = 0 end ; if Y2 == nil then Y2 = 0 end ;
	distancex = X2 - X1
	distancey = Y2 - Y1
	distancez = math.sqrt( ( distancex ^ 2 ) + ( distancey ^ 2 ) )
	return(distancez)
end

function InGMissList(gear)
	local found = 0
	for k,v in pairs(GMissTable) do
		if GetGearType(gear) == v then
			found = found + 1
		end
	end
	if found >= 1 then
		return(true)
	else
		return(false)
	end
end

function ULevelSys(hog, addition, subtraction, become)
	if GetHealth(hog) ~= nil then
		local x = hog ; local xx = addition ; local xxx = subtraction ; local xxxx = become ;
		local y = 0 ; local yy = 0 ; local yyy = ULVExp[hog] ;
		local z = 0 ; local zz = 0 ;
		if xx == nil then
			y = 0
		else
			y = xx
		end
		if xxx == nil then
			yy = 0
		else
			yy = xxx
		end
		if xxxx == nil then
			z = yyy + ( y - yy )
		else
			z = xxxx
		end
		ULVExp[hog] = z
		ULVToNext[hog] = ULVTiers[ULevel[hog] + 1] - ULVExp[hog]
		if ULVToNext[hog] <= 0 then
			ULevel[hog] = ULevel[hog] + 1
			ULVToNextTot[hog] = ULVTiers[ULevel[hog] + 1] - ULVTiers[ULevel[hog]]
			if MyLevelSFXRunning ~= true then
				KWaitExe(2500, ULevelSysSFX, {ULevel[hog] * 2, hog, y - yy, nil, 250, 750, true})
				KWaitExe(4000, ULevelSysSFX2, {12 + (ULevel[hog] * 1), hog, ULevel[hog], nil, 50, 100, true})
			end
			MyLevelSFXRunning = true
			MaxHP[hog] = MaxHP[hog] + FirstHPBase[hog] * 0.015
			ATR.Aug.HLV[hog] = ATR.Aug.HLV[hog] + ULevel[hog] * 0.010 * 0.1
			ATR.Res.HLV[hog] = ATR.Res.HLV[hog] + ULevel[hog] * 0.006 * 0.1
			ATR.Vam.HLV[hog] = ATR.Vam.HLV[hog] + ULevel[hog] * 0.012 * 0.1
			ATR.Abs.HLV[hog] = ATR.Abs.HLV[hog] + ULevel[hog] * 0.010 * 0.1
			ATR.Cri.HLV[hog] = ATR.Cri.HLV[hog] + ULevel[hog] * 0.065 * 0.1
			ATR.Mis.HLV[hog] = ATR.Mis.HLV[hog] + ULevel[hog] * 0.00032 * 0.1
		end
		ULVExp[hog] = math.floor(ULVExp[hog])
		ULVToNext[hog] = math.floor(ULVToNext[hog])
		ULVToNextTot[hog] = math.floor(ULVToNextTot[hog])
		zz = y - yy
		if zz > 0 then
			DamageTag(zz, GetX(hog) + 40, GetY(hog), 0xffffffff)
		elseif zz <= 0 then
			zz = 0.01 -- To make it Not Nil,,, Dangerous nil
		end
	end
end

function ULevelSysSFX(ntimes, hog, Exp, waitdelay, mathranMin, mathranMax, lvup)
	-- Another SFX
	if ntimes > 0 and GetHealth(hog) ~= nil then
		TeamOf =  GetHogTeamName(hog)
		local a = math.random(1, 3)
		if a == 1 then
			PlaySound(sndPiano2)
		elseif a == 2 then
			PlaySound(sndPiano5)
		elseif a == 3 then
			PlaySound(sndPiano6)
		end
		for n=1,ntimes + ULevel[hog] * 2 do
			local MyLevelSFXvgt = AddVisualGear(GetX(hog) + math.random(-100*n, 1000*n), GetY(hog) - 250 + math.random(-10*n, 10*n), vgtExplosion, nil, true)
			SetVisualGearValues(MyLevelSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xffffffff)
			if ntimes >= 7 then
				SetVisualGearValues(MyLevelSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, ColourSet[math.random(1, 10)])
			elseif ntimes >= 5 then
				SetVisualGearValues(MyLevelSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, ColourSet[math.random(1, 5)])
			elseif ntimes <= 2 then
				SetVisualGearValues(MyLevelSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xffffffff)
			end
		end
		if lvup == true then
			for a=1, ULevel[hog] * 5 do
				DamageTag(ULevel[hog], GetX(hog) + math.random(-10*a, 10*a), GetY(hog) + math.random(-10*a, 10*a), GetClanColor(GetHogClan(hog)))
			end
		end
		-- Recall this for, for what i need,,,
		if waitdelay == nil then
			KWaitExe(math.random(mathranMin, mathranMax), ULevelSysSFX, {ntimes - 1, hog, Exp, waitdelay, mathranMin, mathranMax})
		elseif waitdelay ~= nil then
			KWaitExe(waitdelay, ULevelSysSFX, {ntimes - 1, hog, Exp, waitdelay, mathranMin, mathranMax})
		end
	end
end

function ULevelSysSFX2(ntimes, hog, lv, waitdelay, mathranMin, mathranMax, lvup)
	-- Bonus for ULevelSysSFX
	if ntimes > 0 and GetHealth(hog) ~= nil then
		TeamOf =  GetHogTeamName(hog)
		local a = math.random(1, 3)
		if a == 1 then
			PlaySound(sndPiano2)
		elseif a == 2 then
			PlaySound(sndPiano5)
		elseif a == 3 then
			PlaySound(sndPiano6)
		end
		for n=1,1 do
			local MyLevelSFXvgt = AddVisualGear(GetX(hog) + math.random(-100*n, 1000*n), GetY(hog) - 300 + math.random(-10*n, 10*n), vgtExplosion, nil, true)
			SetVisualGearValues(MyLevelSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xffffffff)
			if ntimes >= 7 then
				SetVisualGearValues(MyLevelSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, ColourSet[math.random(1, 10)])
			elseif ntimes >= 5 then
				SetVisualGearValues(MyLevelSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, ColourSet[math.random(1, 5)])
			elseif ntimes <= 2 then
				SetVisualGearValues(MyLevelSFXvgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xffffffff)
			end
		end
		DamageTag(ULevel[hog], GetX(hog) + math.random(-1*ntimes, 1*ntimes), GetY(hog) - (2+lv)*ntimes, 0xffffffff)
		DamageTag(ULevel[hog], GetX(hog) + math.random(-1*ntimes, 1*ntimes), GetY(hog) + (2+lv)*ntimes, 0xffffffff)
		-- Recall again,,,
		if waitdelay == nil then
			KWaitExe(math.random(mathranMin, mathranMax), ULevelSysSFX2, {ntimes - 1, hog, lv, waitdelay, mathranMin, mathranMax})
		elseif waitdelay ~= nil then
			KWaitExe(waitdelay, ULevelSysSFX2, {ntimes - 1, hog, lv, waitdelay, mathranMin, mathranMax})
		end
	elseif ntimes <= 0 and GetHealth(hog) ~= nil then
		for n=1,5 do
			AddVisualGear(GetX(hog), GetY(hog), vgtSmokeRing, 0, false)
			AddVisualGear(GetX(hog) + GetRandom(n * 25 * ULevel[hog]) - GetRandom(n * 25 * ULevel[hog]), GetY(hog) + GetRandom(n * 25 * ULevel[hog]) - GetRandom(n * 25 * ULevel[hog]), vgtSmoke, 0, false)
			AddVisualGear(GetX(hog) + GetRandom(n * 25 * ULevel[hog]) - GetRandom(n * 25 * ULevel[hog]), GetY(hog) + GetRandom(n * 25 * ULevel[hog]) - GetRandom(n * 25 * ULevel[hog]), vgtExplosion, 0, false)
			for m=1,5 do
				local a = math.random(1, 4)
				if a == 1 then
					PlaySound(sndPiano2)
				elseif a == 2 then
					PlaySound(sndPiano4)
				elseif a == 3 then
					PlaySound(sndPiano5)
				elseif a == 4 then
					PlaySound(sndPiano6)
				end
			end
		end
		MyLevelSFXRunning = false
	end
end

-- -- -- -- -- The Minority Galaxy Systems -- Total Function in This Galaxy [2016/12/6] = 15

function ZNowWeaponarySet(gear)
	x = ZLevel[gear]
	Tab1 = {1, 2, 3, 5, 7, 10, 13, 17, 21, 25}
	-- Set the Weaponry per Tier Reached as the Total Zombie Killcount Reach a Specific Line
	if WeaponaryHasGiven[gear] == false then
		for n,m in pairs(AllWeapon) do
			AddAmmo(gear, m, 0)
		end
		if x >= Tab1[1] then
			for n,m in pairs(ZWea1) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[2] then
			for n,m in pairs(ZWea2) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[3] then
			for n,m in pairs(ZWea3) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[4] then
			for n,m in pairs(ZWea4) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[5] then
			for n,m in pairs(ZWea5) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[6] then
			for n,m in pairs(ZWea6) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[7] then
			for n,m in pairs(ZWea7) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[8] then
			for n,m in pairs(ZWea8) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[9] then
			for n,m in pairs(ZWea9) do
				AddAmmo(gear, m, 1)
			end
		end
		if x >= Tab1[10] then
			for n,m in pairs(ZWea10) do
				AddAmmo(gear, m, 1)
			end
		end
		WeaponaryHasGiven[gear] = true
	end
	AddAmmo(gear, amSwitch, 9)
	-- This hog got his weaponary,,, set to true
	WeaponaryHasGiven[gear] = true
end

function PickupCrate(crate)
	x = GetGearPos(crate)
	if x > 0 and x < 8 then
		-- Extra useless sounds,,,
		PlaySound(sndGun)
		-- Addition
		local y = 5000
		-- Set the Cash Now
		TeamOf = GetHogTeamName(CurrentHedgehog)
		TheCash(TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog), y)
		-- Massage + GoldSFX,,, Boring
		GoldSFX(5, CurrentHedgehog, y / 5, nil, 100, 500)
		AddCaption("Collect Crates = Golds")
		AddCaption("Added some "..y.."$ to your Pocket because you Collect a crates,,,",GetClanColor(GetHogClan(CurrentHedgehog)),capgrpMessage2)
	end
end

function GotGoldbag(hog)
	TeamOf =  GetHogTeamName(hog)
	PlaySound(sndShotgunReload)
	-- Addition
	TotBonusTarget = TotBonusTarget + 1
	x = TeamCashStart[TeamOf] * 0.01 + 2500 + TotBonusTarget * 240
	TheCash(TeamOf, GetX(hog), GetY(hog), 0, nil, nil)
	GoldSFX(5, hog, x / 5, nil, 100, 250)
	-- Massage
	local a = TeamCashStart[TeamOf] * 0.01 + 2500 + TotBonusTarget * 240
	AddCaption("Destroy Bonus Target = Golds")
	AddCaption("Added some ".. a .."$ to your Pocket because you Destroy a Bonus Target,,,",GetClanColor(GetHogClan(CurrentHedgehog)),capgrpMessage2)
end

function SetTheGravity(val)
	SetGravity(val)
end

function InstaMove(gear, X, Y)
	SetGearPosition(gear, X, Y)
end

function KillcountSet()
	if IsBot[CurrentHedgehog] == false then
		KillCountZ = KillCountZ + 1
		if TeamZKillCount[GetHogTeamName(CurrentHedgehog)] ~= nil then
			TeamZKillCount[GetHogTeamName(CurrentHedgehog)] = TeamZKillCount[GetHogTeamName(CurrentHedgehog)] + 1
		end
	end
	if TeamTotKillCount[GetHogTeamName(CurrentHedgehog)] ~= nil then
		TeamTotKillCount[GetHogTeamName(CurrentHedgehog)] = TeamTotKillCount[GetHogTeamName(CurrentHedgehog)] + 1
		AddCaption("Total Zombie Killcount : "..KillCountZ.." ,,, Your Team's Total Killcount : "..TeamTotKillCount[GetHogTeamName(CurrentHedgehog)].." ,,, Your Team's Zombie KillCount : "..TeamZKillCount[GetHogTeamName(CurrentHedgehog)].." For Now,,,",GetClanColor(GetHogClan(CurrentHedgehog)),capgrpGameState)
	end
end

function SpawnGoldbag(count)
	for n=1,count do
		-- Spawn a Target for bonus Cash by destroying it,,,
		Target = AddGear(0, 0, gtTarget, 0, 0, 0, 0)
		FindPlace(Target, true, 0, LAND_WIDTH, true)
		x, y = GetGearPosition(Target)
		SetGearPosition(Target, x, 0)
		SetVisualGearValues(Target, g1, g2, 0, 0, g5, 2, g7, visualSprite, g9, g10 )
	end
end

function GiveHPStock()
	for k,hog in pairs(AllHogs) do
		-- Not letting corpses get counted
		if GetHealth(hog) ~= nil then
			-- ATR.RecoveryStore Effect Execution
			x = ATR.RecoveryStore[hog]
			SetHealth(hog, GetHealth(hog) + x)
			if x > 0 then
				-- ATR.RecoveryStore News
				X,Y = GetGearPosition(hog)
				DamageTag(x, X - 80, Y + 40, 0x007575ff)
			end
			-- Reset Usage of ATR.RecoveryStore
			ATR.RecoveryStore[hog] = 0 
		end
	end
end

function NewTurnInfoPanel()
	-- Show Guides
	if TotTurns > 2 then
		ShowMission("NEW TURN !!!"..PresetText1, "NEW DAY,,, NEW DAWN,,,", "This is the new Dawn of Zombie for Survival Trial FOR YOU !!! Even in Dawn,,, Just Pray for your Good Night NOW !!!", -amHellishBomb, 5000)
		if GetHogLevel(CurrentHedgehog) > 0 and GetHealth(HogLastTurn) ~= nil then
			-- Show Stats for Humans User rather than just sit there
			TeamOf =  GetHogTeamName(HogLastTurn)
			x = GetHealth(HogLastTurn)
			Hog = HogLastTurn
			ShowMission("Mirror !!! "..PresetText1, "Only Show your Stats,,, Stats for ["..GetHogName(Hog).."] from team ["..GetHogTeamName(Hog).."]", "-- -- -- These what the Globally you all got : | -- Total Hogs : "..TotHogs.." ... | -- Total Bot Players : "..BotsPlayers.." ... | -- Total Human Players : "..HumanPlayers.." ... | -- Total Zombie KillCount : "..KillCountZ.." ... | -- -- -- These what you got in your Team : | -- The Score of Yours : "..TheScore[TeamOf].." ... | -- Your Team's Cash : "..TeamCash[TeamOf].."$ in your little pocket... | -- Your Team's Discount Base : "..TeamDiscountBase[TeamOf] * 100 .."%  ... | -- Your Team's Discount Now : ".. ( TeamDiscount[TeamOf] + TeamDiscountBase[TeamOf] ) * 100 .."% for now... | -- Your Team's Total Killcount : "..TeamTotKillCount[TeamOf].." ... | -- Your Team's Zombie Killcount : "..TeamZKillCount[TeamOf].." ... | -- -- -- This Hog has : | -- Level : "..ULevel[Hog].." ... | -- Total Experience (EXP) : "..ULVExp[Hog].." ... | -- Exp To Next Level ( "..ULevel[Hog] + 1 .." ) : "..ULVToNext[Hog].." From Totally : "..ULVToNextTot[Hog].." EXP Of This Tier Req. ... | -- Level "..ULevel[Hog] + 1 .." Requirement : "..ULVTiers[ULevel[Hog] + 1].." ... | -- Level "..ULevel[Hog] + 2 .." Requirement : "..ULVTiers[ULevel[Hog] + 2].." ... | -- Health : "..GetHealth(Hog).." (+".. math.floor(  GetHealth(Hog) / MaxHP[Hog] ) * 100 .."%) ... | -- MaxHP : "..MaxHP[Hog].." ... | -- Damage Augmentation : Total["..ATR.Aug.Tot[Hog] * 100 .."%]Base["..ATR.Aug.Base[Hog] * 100 .."%]HLevel["..ATR.Aug.HLV[Hog] * 100 .."%]Upg["..ATR.Aug.Upg[Hog] * 100 .."% [Lv : "..ATR.Aug.UpgLv[Hog].."]]Buff["..ATR.Aug.Buff[Hog] * 100 .."%]Global["..ATR.Aug.GLB[Hog] * 100 .."%] ... | -- Damage Ressistance : Total["..ATR.Res.Tot[Hog] * 100 .."%]Base["..ATR.Res.Base[Hog] * 100 .."%]HLevel["..ATR.Res.HLV[Hog] * 100 .."%]Upg["..ATR.Res.Upg[Hog] * 100 .."% [Lv : "..ATR.Res.UpgLv[Hog].."]]Buff["..ATR.Res.Buff[Hog] * 100 .."%]Global["..ATR.Res.GLB[Hog] * 100 .."%] ... | -- Damage Vampirism : Total["..ATR.Vam.Tot[Hog] * 100 .."%]Base["..ATR.Vam.Base[Hog] * 100 .."%]HLevel["..ATR.Vam.HLV[Hog] * 100 .."%]Upg["..ATR.Vam.Upg[Hog] * 100 .."% [Lv : "..ATR.Vam.UpgLv[Hog].."]]Buff["..ATR.Vam.Buff[Hog] * 100 .."%]Global["..ATR.Vam.GLB[Hog] * 100 .."%] ... | -- Damage Absorbancy : Total["..ATR.Abs.Tot[Hog] * 100 .."%]Base["..ATR.Abs.Base[Hog] * 100 .."%]HLevel["..ATR.Abs.HLV[Hog] * 100 .."%]Upg["..ATR.Abs.Upg[Hog] * 100 .."% [Lv : "..ATR.Abs.UpgLv[Hog].."]]Buff["..ATR.Abs.Buff[Hog] * 100 .."%]Global["..ATR.Abs.GLB[Hog] * 100 .."%] ... | -- Critical Damage : Total["..ATR.Cri.Tot[Hog] * 100 .."%]Base["..ATR.Cri.Base[Hog] * 100 .."%]HLevel["..ATR.Cri.HLV[Hog] * 100 .."%]Upg["..ATR.Cri.Upg[Hog] * 100 .."% [Lv : "..ATR.Cri.UpgLv[Hog].."]]Buff["..ATR.Cri.Buff[Hog] * 100 .."%]Global["..ATR.Cri.GLB[Hog] * 100 .."%]   Critical Chance["..ATR.CriCha.Tot[Hog] * 100 .."%] ..." , 8, 5000)
		end
	else
		ShowMission("[ "..TextX[1]..TextX[2].." ]".." by ".."[ ".."]{".." ]", "TO LEARN TTS DETAILED,,, PLEASE CHECK http://hedgewars.org/node/6623 ,,, HERE THE GUIDES TO PLAY TTS AND OTHER INFORMATIONS PROVIDED AS WELL...", "[ ESC To Show This Massage Again ] What i do when i first time play this ??? ??? : | (1) Go to [ The Hall ] ,,, [ The Hall ] Can be accessed by 'Switch Key' (By Default ,,, it is 'Tab' = 'Switch Key') : | (2) After in [ The Hall ] ,,, then enter again [ The Room ] ,,, which picked with corresponding valid key (e.g Left for Armory to Buy Weaponary) ... : | (3) After in a Room ,,, then pick next option available,,, you can undo to pick [ The Hall ] and [ The Room ] by press 'Switch Key' again until it say it in [ Play Mode ] ... : | (+) You can adjust how many Quantity of Value or Ammo Count you want to buy next,,, by pressing one of 'Timer Keys' (by default, timer key is '1, 2, 3, 4, 5') ... : | (+) Quantity Value can be Multiplied to double by Holding 'Precise Key' + 'Timer Key' like usual Normal Quantity Value Set but with 'Precise Key' holded until press 'Timer Key' ... : | (+) To see your Stats in Game,,, Go to [ The Hall ] (Switch Key) then pick 'Mirror' Room,,, it is 'Precise Key' (by default, it is 'Shift') + 'Down Key' (by default, it is Down Arrow) ... : | (;D) Ask the Author for more info", -amHellishBomb, 7500)
	end
end

function GoldbagsPerTurn()
	-- A Bonus Goldbag everyday !!! if no bots ;/ [Manipulation Detected]
	if BotsPlayers < 1 then
		Goldbag = AddGear(0, 0, gtTarget, 0, 0, 0, 0)
		FindPlace(Goldbag, true, 0, LAND_WIDTH)
		x, y = GetGearPosition(Goldbag)
		SetGearPosition(Goldbag, x, 0)
		SetVisualGearValues(Goldbag, g1, g2, 0, 0, g5, 3, g7, visualSprite, g9, g10 )
		-- Risk ...
		KWaitExe(5000, AddGear, {GetX(Goldbag), GetY(Goldbag), gtSMine, 0, 0, 0, 0})
	end
end

function MaxHPLimiting()
	-- Max HP Cannot be Exceeded,,, But not for Bots,,, Who Cruel ?
	for m,n in pairs(AllHogs) do
		if IsBot[n] == false and GetHealth(n) ~= nil then
			x = GetHealth(n)
			y = MaxHP[n]
			if x > y then
				SetHealth(n, y)
				DamageTag(x - y, GetX(n), GetY(n), 0x505050ff)
			end
		elseif IsBot[n] == true and GetHealth(n) ~= nil then
			-- And for bots,,, restore loss health from poison and SD Damage,,,
			SetHealth(n, GetHealth(n) + 7 ) -- Maybe more HP Given than the loss one ??? wtv (6 MAX Loss HP per turn (poison + SD))s]
			DamageTag(7, GetX(n), GetY(n) - 50, 0x005000ff)
		end
	end
end

-- -- -- -- -- The Systems Galaxy Initializations -- Total Function in This Galaxy [2016/12/6] = 9

function FirstSetup()
	-- Remove BUGS Weapon !!!
	for k,v in pairs(AllHogs) do
		-- Initialize HP Things of Hog
		FirstHPBase[v] = GetHealth(v)
		MaxHP[v] = FirstHPBase[v]
		-- Init THE Standard
		Standard = ( FirstHPBase[v] * 2 ) + ( math.sqrt( ( BotsPlayers - HumanPlayers ) ^ 2) * 15 ) + ( TeamsCount * 100 ) + ( ClansCount * 100 )
		TeamOf =  GetHogTeamName(v)
		-- KillStreak
		KillStreak[v] = 0
		-- Initialize Discount and Ammo
		AmmoNumber = 1
		TeamDiscount[TeamOf] = 0
		TeamDiscountBase[TeamOf] = 0
		-- Hog Number in Teams
		if HogsInTeam[TeamOf] == nil then
			HogsInTeam[TeamOf] = 0
		end
		HogsInTeam[TeamOf] = HogsInTeam[TeamOf] + 1
		-- TeamCash Init
		InitCash(v)
		-- Initialize WEAPONSEA
		InitWeapon(v)
		ZTeamWeapon = {}
		ZTeamWeapon[TeamOf] = {}
		-- Init of Attributes
		InitAttributes(v)
		-- Mutation Things
		InitZMutation(v)
		-- Init KillCount
		TeamTotKillCount[GetHogTeamName(v)] = 0
		TeamZKillCount[GetHogTeamName(v)] = 0
		KillCountZ = 0
		-- Init The Score
		TheScore[TeamOf] = 0
		-- Init of ULevel
		InitULevel(v)
		-- Debugmode is nicely Cheating the own game by its own author XD
		DebugModeSetup(v)
	end
end

function InitCash(v)
	if TeamCashSetup[TeamOf] ~= true then
		TeamOf =  GetHogTeamName(v)
		TeamCashSetup[TeamOf] = true
		TeamCash[TeamOf] = 0
		TeamCashStart[TeamOf] = 0
		TeamCashStart[TeamOf] = Standard * 100
		TeamCash[TeamOf] = TeamCashStart[TeamOf]
		TeamCashFactor[TeamOf] = 1250
	end
end

function InitAttributes(v)
	-- Setup for stats things
	-- -- These is Stats for Human User
	-- ZThingiessss
	ZLevel[v] = 0
	ZMutation[v] = 0
	-- Basic Damage Properties
	local a = 0
	for l,w in pairs(ATR) do
		a = 0
		if w ~= ATR.RecoveryStore and w ~= ATR.AugOut and w ~= ATR.ResOut and w ~= ATR.VamOut and w ~= ATR.AbsOut and w ~= ATR.CriOut and w ~= ATR.MisOut and w ~= ATR.MisGTable then
			for m,x in pairs(w) do
				if x ~= ATR[l].UpgLv then
					ATR[l][m][v] = 0
				elseif x == ATR[l].UpgLv then
					ATR[l][m][v] = 1
				end
			end
		end
	end
	if IsBot[v] == true then
		-- -- The Setup for Bots
		-- ZThings
		ZLevel[v] = 1
		ZMutation[v] = 1
		x = ZLevel[v]
		-- Basic Damage Probalities
		ATR.Aug.HLV[v] = ( ( x * 0.010 ) - 0.010 )
		ATR.Res.HLV[v] = ( ( x * 0.006 ) - 0.006 )
		ATR.Vam.HLV[v] = ( ( x * 0.012 ) - 0.012 )
		ATR.Abs.HLV[v] = ( ( x * 0.010 ) - 0.010 )
		ATR.Cri.HLV[v] = ( ( x * 0.065 ) - 0.065 )
		ATR.CriCha.HLV[v] = ( ( x * 0.0 ) - 0.0 )
		ATR.Mis.HLV[v] = ( ( x * 0.00032 ) - 0.00032 )
	end
	ATR.RecoveryStore[v] = 0
end

function InitZMutation(v)
	if GetHogLevel(v) > 0 then
		x = ZMutation[v]
		-- Set HP
		ZHPBase[v] = GetHealth(v)
		ZHPTemp[v] = GetHealth(v)
		for k=1, #MutationSet do
			if x >= MutationSet[k][1] then
				-- Set Hat
				SetHogHat(v, MutationSet[x][3])
			end
		end
		GiveZPower(v)
	end
end

function InitULevel(v)
	-- Initialize ULevel and some of its Component
	TeamOf =  GetHogTeamName(v)
	ULevel[v] = 1
	ULVExp[v] = 0
	for o=1, 100 do
		if ULVTiers[o] == nil then
			ULVTiers[o] = 0
		end
		if o == 1 then
			ULVTiers[o] = Standard * 50
		elseif o > 1 then
			ULVTiers[o] = ULVTiers[o - 1] + ( ULVTiers[o - 1] * ( o * 0.015 ) ) + o * 2500
		end
		ULVTiers[o] = math.floor(ULVTiers[o])
	end
	ULVToNext[v] = ULVTiers[ULevel[v] + 1]
	ULVToNextTot[v] = ULVTiers[ULevel[v] + 1]
end

function InitWeapon(v)
	if 1 == 1 then
		TeamOf =  GetHogTeamName(v)
		for kk,vv in pairs(AllWeapon) do
			if TeamWeapon[TeamOf] == nil then
				TeamWeapon[TeamOf] = {}
			end
			table.insert(TeamWeapon[TeamOf], kk, {vv[1], vv[2], vv[3], 0})
			if TeamAvailableWeapons[TeamOf] == nil then
				TeamAvailableWeapons[TeamOf] = {}
			end
			table.insert(TeamAvailableWeapons[TeamOf], kk, {vv[1], 1})
		end
		for kk,vv in pairs(TeamWeapon[TeamOf]) do
			TeamWeapon[TeamOf][kk][4] = 0
			if vv[1] == amSkip then
				TeamWeapon[TeamOf][kk][4] = 100
			end
		end
		for kk,vv in pairs(FoundrySet) do
			for kkk,vvv in pairs(vv) do
				if vvv[4] == nil then
					vvv[4] = {}
				end
				vvv[4][TeamOf] = 0
				if vvv[5] == nil then
					vvv[5] = {}
				end
				if vvv[5][1] == nil then
					vvv[5][1] = 1
				end
				if vvv[5][2] == nil then
					vvv[5][2] = 0
				end
				if vvv[5][3] == nil then
					vvv[5][3] = 0
				end
				if vvv[6] == nil then
					vvv[6] = {}
				end
				if vvv[6][1] == nil then
					vvv[6][1] = 10
				end
				if vvv[6][2] == nil then
					vvv[6][2] = {}
				end
				if vvv[6][2][v] == nil then
					vvv[6][2][v] = 0
				end
				if vvv[6][3] == nil then
					vvv[6][3] = {}
				end
				if vvv[6][3][v] == nil then
					vvv[6][3][v] = 0
				end
			end
		end
		for kk,vv in pairs(TechnocoreSet) do
			for kkk,vvv in pairs(vv) do
				if vvv[4] == nil then
					vvv[4] = {}
				end
				vvv[4][TeamOf] = 0
				if vvv[5] == nil then
					vvv[5] = {}
				end
				if vvv[5][1] == nil then
					vvv[5][1] = 1
				end
				if vvv[5][2] == nil then
					vvv[5][2] = 0
				end
				if vvv[5][3] == nil then
					vvv[5][3] = 0
				end
				if vvv[6] == nil then
					vvv[6] = {}
				end
				if vvv[6][1] == nil then
					vvv[6][1] = 10
				end
				if vvv[6][2] == nil then
					vvv[6][2] = {}
				end
				if vvv[6][2][v] == nil then
					vvv[6][2][v] = 0
				end
				if vvv[6][3] == nil then
					vvv[6][3] = {}
				end
				if vvv[6][3][v] == nil then
					vvv[6][3][v] = 0
				end
			end
		end
		for kk,vv in pairs(TradecentreSet) do
			for kkk,vvv in pairs(vv) do
				if vvv[4] == nil then
					vvv[4] = {}
				end
				vvv[4][TeamOf] = 0
				if vvv[5] == nil then
					vvv[5] = {}
				end
				if vvv[5][1] == nil then
					vvv[5][1] = 1
				end
				if vvv[5][2] == nil then
					vvv[5][2] = 0
				end
				if vvv[5][3] == nil then
					vvv[5][3] = 0
				end
				if vvv[6] == nil then
					vvv[6] = {}
				end
				if vvv[6][1] == nil then
					vvv[6][1] = 10
				end
				if vvv[6][2] == nil then
					vvv[6][2] = {}
				end
				if vvv[6][2][v] == nil then
					vvv[6][2][v] = 0
				end
				if vvv[6][3] == nil then
					vvv[6][3] = {}
				end
				if vvv[6][3][v] == nil then
					vvv[6][3][v] = 0
				end
			end
		end
		for kk,vv in pairs(AllHogs) do
			AddAmmo(vv, amSkip, 9)
		end
	end
end

function DebugModeSetup(v)
	TeamOf =  GetHogTeamName(v)
	if DebugMode == true then
		TeamCash[TeamOf] = 10000000
	end
end

function onAmmoStoreInit()
	-- -- Store Initial Weaponary for ALL Hogs
	-- Skip is the Best,,, not going forget him,,,
	SetAmmo(amSkip, 9, 0, 0, 0)
	-- And these two is TOO BEST,,, Forget them :
	SetAmmo(amHammer, 0, 0, 0, 0)
	SetAmmo(amPiano, 0, 0, 0, 0)
	-- Set Weaponary Options for Author only,,, Debugging the Bugs !!!
	for k,v in pairs(AllWeapon) do
		if DebugMode == false then
			SetAmmo(v[1],0,1,0,1)
		else
			SetAmmo(v[1],0,1,0,1)
		end
	end
end

function onGameInit()
	-- [Game Universe Setting]
	TheGameName = "The True Survival ]{_"
	TheGameVersion = "v2.7"
	TheGameAuthor = "UltiMaxKom"
	-- [General Setting]
	Ready = 12000
	Delay = 100
	TurnTime = 60000
	GetAwayTime = 100
	CaseFreq = 1
	HealthCaseProb  = 100
	HealthCaseAmount = 25
	DamagePercent = 100
	RopePercent = 100
	MinesTime = -1000
	MineDudPercent = 25
	SuddenDeathTurns = 5
	WaterRise = 1
	HealthDecrease = 1
	SendStat(siGraphTitle,'The Score')
	-- Gameflags
	ClearGameFlags()
	EnableGameFlags(gfInfAttack)
	-- Skip Dump,,, to make User can costumize it
	x = 0
	if x == 1 then
		-- What an impossible way to true
		Explosives = 25
		MinesNum = 25
	end
end

function onGameStart()
	KWaitExe(8000, TESTMWea, {})
	---------- ShowMission Case
	-- Base of It
	x = 0
	x = x + 1
	TextX[x] = TheGameName
	x = x + 1
	TextX[x] = TheGameVersion
	x = x + 1
	TextX[x] = TheGameAuthor
	x = x + 1
	x = 0
	-- Then Show it To The World
	ShowMission("[ "..TextX[1]..TextX[2].." ]".." by ".."[ ]{ ]", "Be The True Survivor,,, learn and Beat other's Score to Prevail as the Greatest Survival Master...", "Under GNU LGPL v3 Rights License that Let We All To Distribute, Share, Make As A Reference, And Copy the Content With Unlimited Limit Except for Modify and Even more to Falsify or Claims as the Owner of The Content or The Files Itself,,, | No Permission to Modify And Reclaim the These... | All Rights Reserved...", 0, 20000);
	FirstSetup()
end

-- -- -- -- -- The MegaWeapon Galaxy System -- Total Function in This Galaxy [2016/12/6] = 20

function MWeaGate(am)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	if am == amLaserSight and Searcher(nil, am, 0, 1, FoundrySet[4], nil, 1, 4, TeamOf) > 0 then
		RhotonGate()
	elseif am == amClusterBomb and Searcher(nil, am, 0, 1, FoundrySet[4], nil, 1, 4, TeamOf) > 0 then
		VirgoSuperclusterGate()
	elseif am == amAirAttack and Searcher(nil, am, 0, 1, FoundrySet[3], nil, 1, 4, TeamOf) > 0 then
		DangerCloseGate()
	elseif am == amNapalm and Searcher(nil, am, 0, 1, FoundrySet[4], nil, 1, 4, TeamOf) > 0 then
		SunBurnGate()
	elseif am == amFlamethrower and Searcher(nil, am, 0, 1, FoundrySet[3], nil, 1, 4, TeamOf) > 0 then
		RingOfFireGate()
	elseif am == amHellishBomb and Searcher(nil, am, 0, 1, FoundrySet[5], nil, 1, 4, TeamOf) > 0 then
		OrichalcixNukeGate()
	elseif am == amSnowball and Searcher(nil, am, 0, 1, FoundrySet[4], nil, 1, 4, TeamOf) > 0 then
		SandstormGate()
	end
end

function RhotonGate()
	local x,y = GetGearPosition(CurrentHedgehog)
	SetGearPosition(CurrentHedgehog, GetX(CurrentHedgehog), 0)
	for n=1,100 do
		KWaitExe(math.random(n* 1, n * 25), RhotonSFX, {GetX(CurrentHedgehog), GetY(CurrentHedgehog)})
	end
	for o=1,2399 do
		KWaitExe(math.random(o * 0, o * 1), RhotonFly, {x, 0})
	end
	KWaitExe(2400, RhotonEnd, {GetX(CurrentHedgehog), GetY(CurrentHedgehog)})
	KWaitExe(2550, InstaMove, {CurrentHedgehog, x, y})
end

function VirgoSuperclusterGate()
	for n=1,1 do
		KWaitExe(math.random(n * 1, n * 50), VirgoSupercluster, {GetX(CurrentHedgehog), GetY(CurrentHedgehog)})
	end
end

function DangerCloseGate()
	for n=1,5 do
		KWaitExe(math.random(n * 200, n * 400), DangerClose, {GetX(CurrentHedgehog), GetY(CurrentHedgehog)})
	end
end

function SunBurnGate()
	KWaitExe(math.random(1, 50), SunBurn, {GetX(CurrentHedgehog), GetY(CurrentHedgehog)})
end

function RingOfFireGate()
	for n=1,3 do
		KWaitExe(n * 250, RingOfFire, {GetX(CurrentHedgehog), GetY(CurrentHedgehog), n})
	end
end

function OrichalcixNukeGate()
	OrichalcixNukeStart(GetX(CurrentHedgehog), GetY(CurrentHedgehog))
end

function MWeaGearAdd(gear)
	if GetGearType(gear) == gtDEagleShot then
		if MuzzlerOn == 1 then
			local dx,dy = GetGearVelocity(gear)
			MuzzlerGate(GetX(CurrentHedgehog), GetY(CurrentHedgehog), dx, dy, 1)
			MuzzlerOn = 0
		elseif MinigunOn == 1 then
			local dx,dy = GetGearVelocity(gear)
			MinigunGate(GetX(CurrentHedgehog), GetY(CurrentHedgehog), dx, dy, 1)
			MinigunOn = 0
		end
	end
end

function MWeaSwitch(wea)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	if wea ~= amSkip and wea ~= amNothing then
		if wea == amDEagle and MuzzlerAvailable == 1 and Deck == 0 and Searcher(nil, wea, 0, 1, FoundrySet[3], nil, 1, 4, TeamOf) > 0 then
			MuzzlerOn = 1
		elseif wea == amDEagle and MinigunAvailable == 1 and Deck == 0 and Searcher(nil, wea, 0, 1, FoundrySet[4], nil, 1, 4, TeamOf) > 0 then
			MuzzlerOn = 0
			MinigunOn = 1
		else MuzzlerOn = 0 ; MinigunOn = 0 end
	end
end

function VectorForce(gear, V, caster, target, dx, dy, agrav, x1, y1, x2, y2)
	local V = V ; local Vx = 0 ; local Vy = 0 ; local Dx = 0 ; local Dy = 0 ; local nope = 0 ;
	local X1 = 0 ; local X2 = 0 ; local Y1 = 0 ; local Y2 = 0 ; local Z1 = 0 ; local Z2 = 0 ; local X = 0 ; local Y = 0 ; local Z = 0 ;
	-- Preset for faster
	if caster ~= nil then
		X1,Y1 = GetGearPosition(caster)
	elseif x1 ~= nil and y1 ~= nil then
		X1 = x1 ; Y1 = y1
	end
	if target ~= nil then
		X2,Y2 = GetGearPosition(target)
	elseif x2 ~= nil and y2 ~= nil then
		X2 = x2 ; Y2 = y2
	end
	-- Little Formula chunks
	if x1 ~= nil then X1 = X1 + x1 end ; if x2 ~= nil then X2 = X2 + x2 end ; if y1 ~= nil then Y1 = Y1 + y1 end ; if y2 ~= nil then Y2 = Y2 + y2 end ;
	X = X2 - X1 ; Y = Y2 - Y1 ; Z = math.sqrt( X ^ 2 + Y ^ 2 )
	Vx = V * ( X / Z ) -- Gain math.cos a ; Vx = V cos a
	Vy = V * ( Y / Z ) -- Gain math.sin a ; Vy = V sin a
	Vx = Vx * ( X / ( math.abs(X) ) ) -- Revert the Negative,,,
	Vy = Vy * ( Y / ( math.abs(Y) ) ) -- Revert the Negative yeah...
	-- Another shortcut Preset
	if dx == nil then
		Dx,nope = GetGearVelocity(gear)
	elseif dx ~= nil then
		Dx = dx
	end
	if dy == nil then
		nope,Dy = GetGearVelocity(gear)
	elseif dy ~= nil then
		Dy = dy
	end
	if Dx == nil then
		Dx = 0
	end
	if Dy == nil then
		Dy = 0
	end
	-- Conclusion for Vx and Vy
	Vx = Vx + Dx
	Vy = Vy + Dy
	-- GetGravity
	if agrav ~= nil then
		Vy = Vy - ( X * agrav * ( X / math.abs(X) ) + ( Y * agrav * ( Y / math.abs(Y) ) ) )
	end
	-- Deja Vu
	Vx = Vx * ( X / ( math.abs(X) ) ) -- Revert the Negative,,, Again
	Vy = Vy * ( Y / ( math.abs(Y) ) ) -- Revert the Negative,,, And Again
	-- Finally applying the Force with Vector
	SetGearVelocity(gear, Vx, Vy)
end

function TESTMWea()
	--KWaitExe(5000000000000, TESTMWea, {})
	--local g = AddGear(0, 0, gtSnowball, nil, 0, 0, 1000)
	--VectorForce(g, 2000000, nil, CurrentHedgehog, nil, nil, 90, 0, 0, nil, nil)
end

function SandstormGate()
	for n=0,500 + ( ( LAND_HEIGHT * LAND_WIDTH ) / 500 ) do
		KWaitExe(50 * n, Sandstorm, {})
	end
end

function Sandstorm()
	local g = AddGear(math.random(0, LAND_WIDTH), math.random(0, LAND_HEIGHT), gtSnowball, nil, 0, 0, 1000)
	local g2 = AddGear(0, 0, gtSnowball, nil, 0, 0, 1000)
	FindPlace(g2, true, 0, LAND_WIDTH)
	local x,y = GetGearPosition(g2)
	VectorForce(g, 2000000, nil, nil, nil, nil, 90, math.random(0, LAND_WIDTH), math.random(0, LAND_HEIGHT), x, y)
	DeleteGear(g2)
end

function RingOfFire(x, y, o)
	for a=-7,7 do
		for b=-7,7 do
			AddGear(x, y, gtFlame, nil, -(a) * 5000000 + -(o) * 5000000, -(b) * 5000000 + -(o) * 5000000, 1)
		end
	end
end

function Rhoton(x, y)
	for m=-1,1 do
		for n=60,70 do
			local g = AddGear(x + 10, y + 10, gtDEagleShot, nil, 300000, n * math.random(8000, 10000), 1000)
			SetHealth(g, 750)
		end
	end
end

function RhotonEnd(x, y)
	for n=1,25 do
		KWaitExe(math.random(n* 1, n * 2), Rhoton, {GetX(CurrentHedgehog), GetY(CurrentHedgehog)})
	end
end

function RhotonSFX(x, y)
	for n=60,70 do
		for o=1,3 do
			local g = AddGear(x + 10, y + 10, gtDEagleShot, nil, 300000, n * math.random(8000, 10000), 1)
			SetHealth(g, 1)
		end
	end
end

function RhotonFly(x, y)
	SetGearPosition(CurrentHedgehog, x, y)
	SetGearVelocity(CurrentHedgehog, 0, 0)
end

function MuzzlerGate(x, y, dx, dy, ch)
	RapidSurpressOn = 1
	MuzzlerAvailable = 0
	local n = 90
	for m=1,n do
		KWaitExe(50 * m, RapidShot, {nil, nil, X2, Y2, dx, dy, 150, 25, 25, m, n, ch} )
	end
end

function MinigunGate(x, y, dx, dy, ch)
	RapidSurpressOn = 1
	MinigunAvailable = 0
	local n = 360
	for m=1,n do
		KWaitExe(35 * m, RapidShot, {nil, nil, X2, Y2, dx, dy, 100, 35, 35, m, n, ch} )
	end
end

function RapidShot(x1, y1, x2, y2, dx, dy, hp, recoilx, recoily, o, p, ch)
	local X1 = 0 ; local Y1 = 0 ; local X2 = 0 ; local Y2 = 0 ;
	if ch > 0 then
		X1 = GetX(CurrentHedgehog) ; Y1 = GetY(CurrentHedgehog)
		if x1 ~= nil and y1 ~= nil then
			X1 = X1 + x1 ; Y1 = Y1 + y1
		end
	else
		X1 = x1 ; Y1 = y1
	end
	X1 = X1 + ( dx / 20000 )
	Y1 = Y1 + ( dy / 20000 )
	X2 = X1 + ( dx / 10000 )
	Y2 = Y1 + ( dy / 10000 )
	if x2 ~= nil and y2 ~= nil then
		X2 = X2 + x2 ; Y2 = Y2 + y2
	end
	local g = AddGear(X1, Y1, gtDEagleShot, nil, 1, 1, 1000)
	SetHealth(g, hp)
	VectorForce(g, 100000, nil, nil, nil, nil, nil, X1, Y1, X2 + math.random(-1 * recoilx, 1 * recoilx), Y2 + math.random(-1 * recoily, 1 * recoily))
	if o >= p then
		MuzzlerAvailable = 1
		MinigunAvailable = 1
		RapidSurpressOn = 0
	end
end

function VirgoSupercluster(x, y)
	for n=-400,400 do
		KWaitExe(math.abs(n * 100), AddGear, {math.random(0, LAND_WIDTH), math.random(0, LAND_HEIGHT) - LAND_HEIGHT * 0.5 , gtCluster, nil, 0, 100000, 12})
	end
end

function DangerClose(x, y)
	for n=1,1 do
		KWaitExe(math.random(-500,500), DangerCloseDown, {x, y})
	end
end

function DangerCloseDown(x, y)
	for n=2,12 do
		KWaitExe(n * 200, AddGear, {x + n * 50 + math.random(-10,10), 0, gtAirBomb, nil, 0, -1000000000, 1})
		KWaitExe(n * 200, AddGear, {x - n * 50 + math.random(-10,10), 0, gtAirBomb, nil, 0, -1000000000, 1})
	end
end

function SunBurn(x, y)
	for n=0,40 do
		local g = AddGear(n * ( LAND_WIDTH / 40 ), -1.5 * LAND_HEIGHT, gtNapalmBomb, nil, 0, -10000, 1)
		SetWind(0)
	end
	for o=0,10 do
		local g = AddGear(x + o * 10 + -100, -1.5 * LAND_HEIGHT, gtNapalmBomb, nil, 0, -10000, 1)
	end
end

function OrichalcixNukeStart(x, y)
	KWaitExe(3178, OrichalcixNukeMidGate, {x, y})
	for n=1,16 do
		PlaySound(sndPiano8)
		KWaitExe(n * 200, OrichalcixNukeStartSFX, {x, y, n})
	end
end

function OrichalcixNukeStartSFX(x, y, o)
	for m=-18,18 do
		for n=0,18 do
			local OrichalcixNukeVgt = AddVisualGear(x + m, y + n + o * 100 - 1700, vgtSmoke, nil, true)
			SetVisualGearValues(OrichalcixNukeVgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff)
		end
	end
end

function OrichalcixNukeMidGate(x, y)
	for n=1,20 do
		KWaitExeArray(50 * n, {OrichalcixNukeTopInnerBlast, OrichalcixNukeBottomInnerBlast}, {{x, y, n}, {x, y, n}})
	end
	for n=1,50 do
		KWaitExe(25 * n, OrichalcixNukeMidOuterBlast, {x, y, n})
	end
	for n=1,70 do
		KWaitExe(20 * n, OrichalcixNukeShockwave, {x, y, n})
	end
end

function OrichalcixNukeTopInnerBlast(x, y, o)
	for n=1,5 do
		if math.random(1, 4) == 1 then
			local InnerBlast = AddGear(x + math.random(-250 - o * 20, 250 + o * 20), y + math.random(-n * 10, n * 10) - o * 60 + 300, gtDynamite, nil, nil, nil, 1)
			SetHealth(InnerBlast, 0)
			SetGearValues(InnerBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
		else
			local InnerBlast = AddGear(x + math.random(-250 - o * 20, 250 + o * 20), y + math.random(-n * 10, n * 10) - o * 60 + 300, gtDynamite, nil, nil, nil, 1)
			SetHealth(InnerBlast, 0)
			SetGearValues(InnerBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
		end
		for n=1,2 do
			local InnerBlast = AddGear(x + math.random(-250 - o * 20, 250 + o * 20), y + math.random(-n * 10, n * 10) - o * 60 - 100, gtDynamite, nil, nil, nil, 1)
			SetHealth(InnerBlast, 0)
			SetGearValues(InnerBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
			local InnerBlast = AddGear(x + math.random(-250 - o * 50, 250 + o * 50), y + math.random(-n * 10, n * 10) - o * 60 - 100, gtDynamite, nil, nil, nil, 1)
			SetHealth(InnerBlast, 0)
			SetGearValues(InnerBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
		end
	end
end

function OrichalcixNukeBottomInnerBlast(x, y, o)
	for n=1,5 do
		if math.random(1, 4) == 1 then
			local InnerBlast = AddGear(x + math.random(-250 - o * 20, 250 + o * 20), y + math.random(-n * 10, n * 10) + o * 60 - 300, gtDynamite, nil, nil, nil, 1)
			SetHealth(InnerBlast, 0)
			SetGearValues(InnerBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
		else
			local InnerBlast = AddGear(x + math.random(-250 - o * 20, 250 + o * 20), y + math.random(-n * 10, n * 10) + o * 60 - 300, gtDynamite, nil, nil, nil, 1)
			SetHealth(InnerBlast, 0)
			SetGearValues(InnerBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
		end
		for n=1,2 do
			local InnerBlast = AddGear(x + math.random(-250 - o * 20, 250 + o * 20), y + math.random(-n * 10, n * 10) + o * 60 + 100, gtDynamite, nil, nil, nil, 1)
			SetHealth(InnerBlast, 0)
			SetGearValues(InnerBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
			local InnerBlast = AddGear(x + math.random(-250 - o * 50, 250 + o * 50), y + math.random(-n * 10, n * 10) + o * 60 + 100, gtDynamite, nil, nil, nil, 1)
			SetHealth(InnerBlast, 0)
			SetGearValues(InnerBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
		end
	end
end

function OrichalcixNukeMidOuterBlast(x, y, o)
	for n=1,3 do
		if math.random(1, 4) == 1 then
			local OuterBlast = AddGear(x + math.random(-50 * o, 0 * o), y + math.random(-n * 25, n * 25) + 20, gtDynamite, nil, nil, nil, 1)
			SetHealth(OuterBlast, 0)
			SetGearValues(OuterBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			local OuterBlast = AddGear(x + math.random(0 * o, 50 * o), y + math.random(-n * 25, n * 25) + 20, gtDynamite, nil, nil, nil, 1)
			SetHealth(OuterBlast, 0)
			SetGearValues(OuterBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
		else
			local OuterBlast = AddGear(x + math.random(-50 * o, 0 * o), y + math.random(-n * 25, n * 25) + 20, gtDynamite, nil, nil, nil, 1)
			SetHealth(OuterBlast, 0)
			SetGearValues(OuterBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			local OuterBlast = AddGear(x + math.random(0 * o, 50 * o), y + math.random(-n * 25, n * 25) + 20, gtDynamite, nil, nil, nil, 1)
			SetHealth(OuterBlast, 0)
			SetGearValues(OuterBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
			PlaySound(sndExplosion)
		end
		local OuterBlast = AddGear(x + math.random(-50 * o, 0 * o), y + math.random(-n * 25, n * 25) + 100, gtDynamite, nil, nil, nil, 1)
		SetHealth(OuterBlast, 0)
		SetGearValues(OuterBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
		local OuterBlast = AddGear(x + math.random(0 * o, 50 * o), y + math.random(-n * 25, n * 25) + 100, gtDynamite, nil, nil, nil, 1)
		SetHealth(OuterBlast, 0)
		SetGearValues(OuterBlast, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
		PlaySound(sndExplosion)
		local OrichalcixNukeVgt = AddVisualGear(x + math.random(-250 * o, -100 * o), y + math.random(-n * 50, n * 50) - n * 10 + 20, vgtExplPart, nil, true)
		SetVisualGearValues(OrichalcixNukeVgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff)
		local OrichalcixNukeVgt = AddVisualGear(x + math.random(100 * o, 250 * o), y + math.random(-n * 50, n * 50) - n * 10 + 20, vgtExplPart, nil, true)
		SetVisualGearValues(OrichalcixNukeVgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff)
		PlaySound(sndExplosion)
		for n=1,30 do
			PlaySound(sndExplosion)
		end
	end
end

function OrichalcixNukeShockwave(x, y, o)
	for n=-4,4 do
		local Shockwave = AddGear(x + o * 40 + math.random(0, 30) - math.sqrt( ( n * 30 ) ^ 2 ), y + n * 40 + math.random(-20, 20), gtBall, nil, nil, nil, 1)
		SetHealth(Shockwave, 0)
		SetGearValues(Shockwave, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
		local Shockwave = AddGear(x + -o * 40 + math.random(-30, 0) + math.sqrt( ( n * 30 ) ^ 2 ), y + n * 40 + math.random(-20, 20), gtBall, nil, nil, nil, 1)
		SetHealth(Shockwave, 0)
		SetGearValues(Shockwave, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff, nil, nil)
	end
	for n=-20,20 do
		local OrichalcixNukeShockwaveVgt = AddVisualGear(x + o * 40 + math.random(0, 30) - math.sqrt( ( n * 30 ) ^ 2 ), y + n * 30 + math.random(-20, 20), vgtExplPart, nil, true)
		SetVisualGearValues(OrichalcixNukeShockwaveVgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff)
		for k,v in pairs(AllHogs) do
			local X,Y = GetGearPosition(v)
			local Z = GetDistance(v, nil, nil, nil, x + o * 40 + math.random(0, 30) - math.sqrt( ( n * 30 ) ^ 2 ), y + n * 30 + math.random(-20, 20))
			if Z < 100 and GetHealth(v) ~= nil and CurrentHedgehog ~= nil then
				VectorForce(v, 700000, nil, nil, nil, nil, nil, X, Y, x, y)
			end
		end
		local OrichalcixNukeShockwaveVgt = AddVisualGear(x + -o * 40 + math.random(-30, 0) + math.sqrt( ( n * 30 ) ^ 2 ), y + n * 30 + math.random(-20, 20), vgtExplPart, nil, true)
		SetVisualGearValues(OrichalcixNukeShockwaveVgt, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0xff0000ff)
		for k,v in pairs(AllHogs) do
			local X,Y = GetGearPosition(v)
			local Z = GetDistance(v, nil, nil, nil, x + -o * 40 + math.random(-30, 0) + math.sqrt( ( n * 30 ) ^ 2 ), y + n * 30 + math.random(-20, 20))
			if Z < 100 and GetHealth(v) ~= nil and CurrentHedgehog ~= nil then
				VectorForce(v, 700000, nil, nil, nil, nil, nil, X, Y, x, y)
			end
		end
	end
end

-- -- -- -- -- The ZBots Galaxy Systems -- Total Function in This Galaxy [2016/12/6] = 5

function BotLVUpSFX(gear)
	for n=1,6 do
		AddVisualGear(GetX(gear), GetY(gear), vgtSmokeRing, 0, false)
		AddVisualGear(GetX(gear) + GetRandom(n * 25 * ZLevel[gear]) - GetRandom(n * 25 * ZLevel[gear]), GetY(gear) + GetRandom(n * 25 * ZLevel[gear]) - GetRandom(n * 25 * ZLevel[gear]), vgtSmoke, 0, false)
		AddVisualGear(GetX(gear) + GetRandom(n * 25 * ZLevel[gear]) - GetRandom(n * 25 * ZLevel[gear]), GetY(gear) + GetRandom(n * 25 * ZLevel[gear]) - GetRandom(n * 25 * ZLevel[gear]), vgtExplosion, 0, false)
	end
	x = math.random(1, 4)
	for n=1,ZLevel[gear] do
		PlaySound(HellishSndSet[x])
	end	
end

function BotLVUp(gear)
	x = ZMutation[gear]
	ATR.Aug.HLV[gear] = ( ( x * 0.010 ) - 0.010 )
	ATR.Res.HLV[gear] = ( ( x * 0.006 ) - 0.006 )
	ATR.Vam.HLV[gear] = ( ( x * 0.012 ) - 0.012 )
	ATR.Abs.HLV[gear] = ( ( x * 0.010 ) - 0.010 )
	ATR.Cri.HLV[gear] = ( ( x * 0.065 ) - 0.065 )
	ATR.CriCha.HLV[gear] = ( ( x * 0.0 ) - 0.0 )
	ATR.Mis.HLV[gear] = ( ( x * 0.00032 ) - 0.00032 )
	for n=1, #MutationSet do
		x = ZMutation[gear]
		if x >= MutationSet[n][1] then
			y = n
		end
	end
	-- News Release
	HogSay(gear, "i'm "..MutationSet[y][2].."[Lv.".. x .."] !!! | [" .. math.floor(ATR.Aug.Tot[gear] * 100) .. "] ; [" .. math.floor(ATR.Res.Tot[gear] * 100) .. "] ; [" .. math.floor(ATR.Vam.Tot[gear] * 100) .. "] ; [" .. math.floor(ATR.Abs.Tot[gear] * 100) .. "]", HogSayMannerC);
end

function ReZMutation(gear)
	x = ZMutation[gear]
	for n=1, #MutationSet do
		if x >= MutationSet[n][1] then
			-- Set Hat
			SetHogHat(gear, MutationSet[n][3])
			-- Set HP Properties
			ZHPAddition[gear] = MutationSet[n][6]
			SetHealth(gear, ZHPBase[gear] + MutationSet[n][4] + ZHPAddition[gear] * ZLevel[gear])
			ZHPTemp[gear] = GetHealth(gear)
			-- Set is that guy a Swimmer ???
			if ZIsSwimmer[gear] > 0 then
				Swimmer[gear] = true
			else
				Swimmer[gear] = false
			end
			if ZIsBoomer[gear] > 0 then
				local e = AddGear(GetX(gear), GetY(gear), gtExplosives, nil, nil, nil, 1000)
				SetHealth(e, 0)
			end
		end
	end
end

function BotsOnTheMove(hog)
	if IsBot[CurrentHedgehog] == true then
		for n=1, #MutationSet do
			x = ZMutation[CurrentHedgehog]
			if x >= MutationSet[n][1] then
				y = n
			end
		end
		AddCaption(MutationSet[y][2].." On The Move")
	end
end

function GiveZPower(gear)
	if IsBot[gear] == true then
		for k,v in pairs(ZPowerSet) do
			if k == ZLevel[gear] then
				local x = 0
				local h = gear
				x = x + 1
				ZIsEscaper[h] = v[x]
				x = x + 1
				ZIsVirus [h] = v[x]
				x = x + 1
				ZIsBoomer [h] = v[x]
				x = x + 1
				ZIsSwimmer [h] = v[x]
				x = x + 1
				ZIsBlazer [h] = v[x]
				x = x + 1
				ZIsUnstable [h] = v[x]
				x = x + 1
				ZIsHavoc [h] = v[x]
				x = x + 1
				ZIsGraviton[h] = v[x]
				x = x + 1
				ZIsDoomLord[h] = v[x]
				x = x + 1
				ZIsHellion[h] = v[x]
				x = x + 1
				ZIsOverpower[h] = v[x]
				x = x + 1
				ZIsPiercer[h] = v[x]
				x = x + 1
				ZIsAdaman[h] = v[x]
				x = x + 1
				ZIsSpacemaster[h] = v[x]
				x = x + 1
				ZIsDestro[h] = v[x]
				x = x + 1
				ZIsDeathbringer[h] = v[x]
				x = x + 1
				ZIsReaper[h] = v[x]
				x = x + 1
				ZIsForcer[h] = v[x]
				x = x + 1
				ZIsBlinkman[h] = v[x]
				x = x + 1
				ZIsApoclance[h] = v[x]
				x = x + 1
			end
		end
	end
end

-- -- -- -- -- The ZPowers Galaxy Systems -- Total Function in This Galaxy [2016/12/6] = 1

function Escaper()
	-- SkipBotReplacement reset 
	if GetHealth(HogLastTurn) ~= nil and IsBot[HogLastTurn] == true then
		if HogAttackCount < 1 and GetHogLevel(HogLastTurn) > 0 and ZIsEscaper[HogLastTurn] > 0 then
			SkipBotReplacement = HogLastTurn
			SetGearPosition(SkipBotReplacement, GetX(SkipBotReplacement), LAND_HEIGHT * -1)
			SetEffect(SkipBotReplacement, heInvulnerable, 1)
		end
	end
end

-- -- -- -- -- The Buy Galaxy System -- Total Function in This Galaxy [2016/12/6] = 13

function onPreciseUp()
	KeyGateway(8)
end

function onPrecise()
	KeyGateway(7)
end

function onTimer(number)
	KeyGateway(6, number)
end

function onSwitch()
	KeyGateway(5)
end

function onDown()
	KeyGateway(4)
end

function onRight()
	KeyGateway(3)
end

function onUp()
	KeyGateway(2)
end

function onLeft()
	KeyGateway(1)
end

function onSlot(slot)
	if Deck > 0 then
		-- Cheater now got nothing,,, eh sorry for em,,,
		PlaySound(sndDenied)
		SetWeapon(amSkip)
		HideWeapon()
		GoToPlayMode()
	end
end

function KeyGateway(key, number)
	if key == 8 then
		PreciseOn = false
		if Deck2Shortcut == true then
			Deck = 1
			BuyTier = 1
			Deck2Shortcut = false
			HideWeapon()
			ReturnWeapon()
		end
	elseif key == 7 then
		PreciseOn = true
	elseif key == 6 then
		if Deck == 1 then
			if PreciseOn ~= true then
				AmmoNumber = number
			else
				AmmoNumber = number * 2
			end
			AmmoNumberDiscountSet(number)
			AddCaption("AmmoNumber Become ["..number.."] and set Ammo Number Discount Bonus to [%"..AmmoNumberDiscount * 100 .."]")
		elseif Deck == 2 then
			AddCaption("BuyTier Become ["..number.."] from ["..BuyTier.."]")
			BuyTier = number
		end
	elseif key == 5 then
		ArsenalUnlockerRapidKeyGate = 0
		if BMStarter == true and PreciseOn ~= true then
			GoToPlayMode()
			HideWeapon()
			ReturnWeapon()
			ShowMission("BuyMode Exit [Deck 0] "..PresetText1, "Exit The BuyMode", "You have exit [BuyGate]", 8, 3000)
		elseif BMStarterAvailable == true and BMStarter ~= true then
			Deck = 1
			BMStarter = true
			ShowMission("BuyMode Starter [Deck 1] "..PresetText1, "Pick BuyMode Option", "You have enter [BuyGate]", 3, 3000)
		end
		if Deck == 1 and PreciseOn == true then
			HideWeapon()
			Deck = 2
			ShowMission("The Lift [Deck 2] "..PresetText1, "Deck 2 Entered", "You have enter [Lift]", 3, 3000)
		elseif Deck == 2 then
			HideWeapon()
			Deck = 1
			ShowMission("The Lift Exit [Deck 1] "..PresetText1, "Exit The Lift", "You have enter [BuyGate]", 8, 3000)
		end
	end
	if BMStarter == true then
		if key == 4 and BuyTier <= 1 then
			HideWeapon()
			if BuyTier == 2 and Deck == 1 and PreciseOn == true then
				BuyTier = 2
				ShowWeapon(AllWeapon, BuyTier)
				AddCaption(ShowcaseDeckMsg[BuyTier], GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
				ShowMission("The Showcase ["..BuyTier.."] "..PresetText1, "The Showcase Shop", "You have enter [The Showcase ["..BuyTier.."]", 7, 3000)
				Deck2Shortcut = true
			else
				BuyTier = BuyTier
				AddCaption(ShowcaseDeckMsg[BuyTier], GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
				TeamOf =  GetHogTeamName(CurrentHedgehog)
				Hog = CurrentHedgehog
				ShowMission("Mirror !!! "..PresetText1, "Only Show your Stats,,, Stats for ["..GetHogName(Hog).."] from team ["..GetHogTeamName(Hog).."]", "-- -- -- These what the Globally you all got : | -- Total Hogs : "..TotHogs.." ... | -- Total Bot Players : "..BotsPlayers.." ... | -- Total Human Players : "..HumanPlayers.." ... | -- Total Zombie KillCount : "..KillCountZ.." ... | -- -- -- These what you got in your Team : | -- The Score of Yours : "..TheScore[TeamOf].." ... | -- Your Team's Cash : "..TeamCash[TeamOf].."$ in your little pocket... | -- Your Team's Discount Base : "..TeamDiscountBase[TeamOf] * 100 .."%  ... | -- Your Team's Discount Now : ".. ( TeamDiscount[TeamOf] + TeamDiscountBase[TeamOf] ) * 100 .."% for now... | -- Your Team's Total Killcount : "..TeamTotKillCount[TeamOf].." ... | -- Your Team's Zombie Killcount : "..TeamZKillCount[TeamOf].." ... | -- -- -- This Hog has : | -- Level : "..ULevel[Hog].." ... | -- Total Experience (EXP) : "..ULVExp[Hog].." ... | -- Exp To Next Level ( "..ULevel[Hog] + 1 .." ) : "..ULVToNext[Hog].." From Totally : "..ULVToNextTot[Hog].." EXP Of This Tier Req. ... | -- Level "..ULevel[Hog] + 1 .." Requirement : "..ULVTiers[ULevel[Hog] + 1].." ... | -- Level "..ULevel[Hog] + 2 .." Requirement : "..ULVTiers[ULevel[Hog] + 2].." ... | -- Health : "..GetHealth(Hog).." (+".. math.floor(  GetHealth(Hog) / MaxHP[Hog] ) * 100 .."%) ... | -- MaxHP : "..MaxHP[Hog].." ... | -- Damage Augmentation : Total["..ATR.Aug.Tot[Hog] * 100 .."%]Base["..ATR.Aug.Base[Hog] * 100 .."%]HLevel["..ATR.Aug.HLV[Hog] * 100 .."%]Upg["..ATR.Aug.Upg[Hog] * 100 .."% [Lv : "..ATR.Aug.UpgLv[Hog].."]]Buff["..ATR.Aug.Buff[Hog] * 100 .."%]Global["..ATR.Aug.GLB[Hog] * 100 .."%] ... | -- Damage Ressistance : Total["..ATR.Res.Tot[Hog] * 100 .."%]Base["..ATR.Res.Base[Hog] * 100 .."%]HLevel["..ATR.Res.HLV[Hog] * 100 .."%]Upg["..ATR.Res.Upg[Hog] * 100 .."% [Lv : "..ATR.Res.UpgLv[Hog].."]]Buff["..ATR.Res.Buff[Hog] * 100 .."%]Global["..ATR.Res.GLB[Hog] * 100 .."%] ... | -- Damage Vampirism : Total["..ATR.Vam.Tot[Hog] * 100 .."%]Base["..ATR.Vam.Base[Hog] * 100 .."%]HLevel["..ATR.Vam.HLV[Hog] * 100 .."%]Upg["..ATR.Vam.Upg[Hog] * 100 .."% [Lv : "..ATR.Vam.UpgLv[Hog].."]]Buff["..ATR.Vam.Buff[Hog] * 100 .."%]Global["..ATR.Vam.GLB[Hog] * 100 .."%] ... | -- Damage Absorbancy : Total["..ATR.Abs.Tot[Hog] * 100 .."%]Base["..ATR.Abs.Base[Hog] * 100 .."%]HLevel["..ATR.Abs.HLV[Hog] * 100 .."%]Upg["..ATR.Abs.Upg[Hog] * 100 .."% [Lv : "..ATR.Abs.UpgLv[Hog].."]]Buff["..ATR.Abs.Buff[Hog] * 100 .."%]Global["..ATR.Abs.GLB[Hog] * 100 .."%] ... | -- Critical Damage : Total["..ATR.Cri.Tot[Hog] * 100 .."%]Base["..ATR.Cri.Base[Hog] * 100 .."%]HLevel["..ATR.Cri.HLV[Hog] * 100 .."%]Upg["..ATR.Cri.Upg[Hog] * 100 .."% [Lv : "..ATR.Cri.UpgLv[Hog].."]]Buff["..ATR.Cri.Buff[Hog] * 100 .."%]Global["..ATR.Cri.GLB[Hog] * 100 .."%]   Critical Chance["..ATR.CriCha.Tot[Hog] * 100 .."%] ... | -- Defuse-o-Miss : Total["..ATR.Mis.Tot[Hog] * 100 .."%]Base["..ATR.Mis.Base[Hog] * 100 .."%]HLevel["..ATR.Mis.HLV[Hog] * 100 .."%]Upg["..ATR.Mis.Upg[Hog] * 100 .."% [Lv : "..ATR.Mis.UpgLv[Hog].."]]Buff["..ATR.Mis.Buff[Hog] * 100 .."%]Global["..ATR.Mis.GLB[Hog] * 100 .."%]" , 8, 5000)
			end
			TradecentreOn = true
			BMStarter = true
		elseif key == 3 and BuyTier <= 1 then
			HideWeapon()
			if BuyTier == 2 and Deck == 1 and PreciseOn == true then
				BuyTier = 2
				ShowWeapon(TradecentreSet, BuyTier)
				AddCaption(TradecentreDeckMsg[BuyTier], GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
				ShowMission("The Tradecentre ["..BuyTier.."] "..PresetText1, "The Tradecentre Shop", "You have enter [The Tradecentre ["..BuyTier.."]", 7, 3000)
				Deck2Shortcut = true
			else
				BuyTier = BuyTier
				ShowWeapon(TradecentreSet, BuyTier)
				AddCaption(TradecentreDeckMsg[BuyTier], GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
				ShowMission("The Tradecentre ["..BuyTier.."] "..PresetText1, "The Tradecentre Shop", "You have enter [The Tradecentre ["..BuyTier.."]", 7, 3000)
			end
			TradecentreOn = true
			BMStarter = true
		elseif key == 2 and BuyTier <= 1 then
			HideWeapon()
			if BuyTier == 2 and Deck == 1 and PreciseOn == true then
				BuyTier = 2
				ShowWeapon(TechnocoreSet, BuyTier)
				AddCaption(TechnocoreDeckMsg[BuyTier], GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
				ShowMission("The Technocore ["..BuyTier.."] "..PresetText1, "The Technocore Shop", "You have enter [The Technocore ["..BuyTier.."]", 7, 3000)
				Deck2Shortcut = true
			else
				BuyTier = BuyTier
				ShowWeapon(TechnocoreSet, BuyTier)
				AddCaption(TechnocoreDeckMsg[BuyTier], GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
				ShowMission("The Technocore ["..BuyTier.."] "..PresetText1, "The Technocore Shop", "You have enter [The Technocore ["..BuyTier.."]", 7, 3000)
			end
			TechnocoreOn = true
			BMStarter = true
		elseif key == 1 then
			HideWeapon()
			if BuyTier == 1 and Deck == 1 and PreciseOn == true and ArsenalUnlockerRapidKeyGate < 3 then
				BuyTier = 2
				ShowWeapon(FoundrySet, BuyTier)
				ArsenalUnlockerOn = false
				AddCaption(FoundryDeckMsg[BuyTier], GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
				ShowMission("The Foundry ["..BuyTier.."] "..PresetText1, "The Foundry Shop", "You have enter [The Foundry ["..BuyTier.."]", 7, 3000)
				Deck2Shortcut = true
			elseif ArsenalUnlockerRapidKeyGate < 3 then
				BuyTier = BuyTier
				ShowWeapon(FoundrySet, BuyTier)
				ArsenalUnlockerOn = false
				AddCaption(FoundryDeckMsg[BuyTier], GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
				ShowMission("The Foundry ["..BuyTier.."] "..PresetText1, "The Foundry Shop", "You have enter [The Foundry ["..BuyTier.."]", 7, 3000)
			end
			FoundryOn = true
			BMStarter = true
			if ArsenalUnlockerRapidKeyGate < 3 then
				ArsenalUnlockerRapidKeyGate = ArsenalUnlockerRapidKeyGate + 1
				if ArsenalUnlockerRapidKeyGate >= 3 then
					ArsenalUnlockerRapidKeyGate = 0
					HideWeapon()
					ShowWeapon(ArsenalUnlockerSet, 1, 1)
					ArsenalUnlockerOn = true
					FoundryOn = false
					BMStarter = true
					AddCaption("Arsenal Unlocker", GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
					ShowMission("Arsenal Unlocker", "Arsenal Unlocker", "You have enter Arsenal Unlocker", 7, 3000)
				end
			end
		end
	end
end

function onSetWeapon(wea)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	local msg1 = nil
	local msg2 = nil
	local quantity = nil
	if wea ~= amSwitch or am ~= amPortalGun then
		BMStarterAvailable = true
	else BMStarterAvailable = false end
	if wea ~= amSkip and wea ~= amNothing and Deck > 0 then
		if BMStarter ~= false then
			if FoundryOn ~= false then
				for k,v in pairs(FoundrySet[BuyTier]) do
					if wea == v[1] then
						Price = v[3] * TeamCashFactor[TeamOf] * AmmoNumber
						Price = Price - Price * TeamDiscount[TeamOf]
						if TeamCash[TeamOf] - Price > 0 then
							quantity = AmmoNumber * ( v[5][1] + v[5][2] + v[5][3] )
							FoundryBuy(wea, quantity, BuyTier)
							BuySound = true
							GetBuyScore = true
							msg1 = "Bought "..AmmoNumber.." of "..v[2]
							msg2 = "Costed : "..TeamCash[TeamOf].."$ - "..Price.."$ (".. zzz * 100 .."% Discount) = "..TeamCash[TeamOf] - Price.."$",GetClanColor(GetHogClan(CurrentHedgehog))
						else
							msg1 = "Failed in Deal"
							msg2 = "You can not afford that! Costs:".." ["..Price.."$] for "..AmmoNumber.." of "..v[2]..", "..("You have:").." ["..TeamCash[TeamOf].."$]"
						end
					end
				end
			end
			if TechnocoreOn ~= false and BuyTier <= 1 then
				for k,v in pairs(TechnocoreSet[BuyTier]) do
					if wea == v[1] then
						Price = v[3] * TeamCashFactor[TeamOf] * AmmoNumber
						Price = Price - Price * TeamDiscount[TeamOf]
						if TeamCash[TeamOf] - Price > 0 then
							quantity = AmmoNumber * ( v[5][1] + v[5][2] + v[5][3] )
							TechnocoreBuy(wea, quantity, BuyTier)
							BuySound = true
							GetBuyScore = true
							msg1 = "Bought "..AmmoNumber.." of "..v[2]
							msg2 = "Costed : "..TeamCash[TeamOf].."$ - "..Price.."$ (".. zzz * 100 .."% Discount) = "..TeamCash[TeamOf] - Price.."$",GetClanColor(GetHogClan(CurrentHedgehog))
						else
							msg1 = "Failed in Deal"
							msg2 = "You can not afford that! Costs:".." ["..Price.."$] for "..AmmoNumber.." of "..v[2]..", "..("You have:").." ["..TeamCash[TeamOf].."$]"
						end
					end
				end
			end
			if TradecentreOn ~= false and BuyTier <= 1 then
				for k,v in pairs(TradecentreSet[BuyTier]) do
					if wea == v[1] then
						Price = v[3] * TeamCashFactor[TeamOf] * AmmoNumber
						Price = Price - Price * TeamDiscount[TeamOf]
						if TeamCash[TeamOf] - Price > 0 then
							quantity = AmmoNumber * ( v[5][1] + v[5][2] + v[5][3] )
							TradecentreBuy(wea, quantity, BuyTier)
							BuySound = true
							GetBuyScore = true
							msg1 = "Bought "..AmmoNumber.." of "..v[2]
							msg2 = "Costed : "..TeamCash[TeamOf].."$ - "..Price.."$ (".. zzz * 100 .."% Discount) = "..TeamCash[TeamOf] - Price.."$",GetClanColor(GetHogClan(CurrentHedgehog))
						else
							msg1 = "Failed in Deal"
							msg2 = "You can not afford that! Costs:".." ["..Price.."$] for "..AmmoNumber.." of "..v[2]..", "..("You have:").." ["..TeamCash[TeamOf].."$]"
						end
					end
				end
			end
			if ArsenalUnlockerOn ~= false and BuyTier <= 1 then
				for k,v in pairs(ArsenalUnlockerSet[BuyTier]) do
					if wea == v[1] then
						Price = v[3] * TeamCashFactor[TeamOf]
						Price = Price - Price * TeamDiscount[TeamOf]
						if TeamCash[TeamOf] - Price > 0 then
							quantity = 1
							ArsenalUnlockerBuy(wea, quantity, BuyTier)
							BuySound = true
							GetBuyScore = true
							msg1 = "Bought "..AmmoNumber.." of "..v[2]
							msg2 = "Costed : "..TeamCash[TeamOf].."$ - "..Price.."$ (".. zzz * 100 .."% Discount) = "..TeamCash[TeamOf] - Price.."$",GetClanColor(GetHogClan(CurrentHedgehog))
						else
							msg1 = "Failed in Deal"
							msg2 = "You can not afford that! Costs:".." ["..Price.."$] for "..AmmoNumber.." of "..v[2]..", "..("You have:").." ["..TeamCash[TeamOf].."$]"
						end
					end
				end
			end
			AddCaption(msg1)
			AddCaption(msg2, GetClanColor(GetHogClan(CurrentHedgehog)), capgrpMessage2)
			ResetDiscountBonus()
			FoundryOn = false
		end
		-- SFX
		if BuySound == true then
			BuySound = false
			PlaySound(sndShotgunReload)
		end
		-- The Score
		if GetBuyScore == true then
			TheScoreAdd(Price * 0.5, TeamOf, GetX(CurrentHedgehog), GetY(CurrentHedgehog))
			GetBuyScore = false
		end
		-- Set Weapon Selected at now to Skip if no Auto-Select order has given
		if AutoSelectWea == false then
			SetWeapon(amSkip)
		end
		-- Reset AutoSelectWea
		AutoSelectWea = true
		-- Give the weaponary of that little hog back... oh yeah with the new weapon.
		HideWeapon()
		ReturnWeapon()
		-- Reset Shop
		GoToPlayMode()
		AmmoNumberDiscountSet(AmmoNumber)
		-- MegaWeapon
		Deck = 0
		MWeaSwitch(wea)
	end
end

function FoundryBuy(what, quantity, buytier)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	if buytier < 3 then
		for k,v in pairs(TeamWeapon[TeamOf]) do
			if what == v[1] then
				TeamWeapon[TeamOf][k][4] = TeamWeapon[TeamOf][k][4] + quantity
			end
		end
	else
		for k,v in pairs(FoundrySet[buytier]) do
			if what == v[1] then
				FoundrySet[buytier][k][4][TeamOf] = FoundrySet[buytier][k][4][TeamOf] + quantity
			end
		end
	end
end

function ArsenalUnlockerBuy(what, quantity, buytier)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	if buytier == 1 then
		local unlock = false
		if what == amBazooka then
			unlock = true
		elseif what == amGirder then
			unlock = true
		elseif what == amRubber then
			unlock = true
		elseif what == amVampiric then
			unlock = true
		end
		if unlock ~= false then
			local kk = Searcher(nil, what, 1, 0, ArsenalUnlockerSet[buytier], nil, 1)
			HogSay(CurrentHedgehog, kk, SAY_SAY)
			HogSay(CurrentHedgehog, #ArsenalUnlockerSet[buytier][kk][4], SAY_SHOUT)
			for k,v in pairs(ArsenalUnlockerSet[buytier][kk][4]) do
				local kkk = Searcher(nil, v[1], 1, 0, TeamAvailableWeapons[TeamOf], nil, 1)
				HogSay(CurrentHedgehog, kkk, SAY_SAY)
				HogSay(CurrentHedgehog, Searcher(nil, v[1], 0, 1, TeamAvailableWeapons[TeamOf], nil, 1, 2), SAY_SAY)
				table.insert(TeamAvailableWeapons[TeamOf][kkk], 1)
				TeamAvailableWeapons[TeamOf][kkk][2] = 1
				HogSay(CurrentHedgehog, TeamAvailableWeapons[TeamOf][kkk][2], SAY_SAY)
				HogSay(CurrentHedgehog, Searcher(nil, v[1], 0, 1, TeamAvailableWeapons[TeamOf], nil, 1, 2), SAY_SAY)
			end
		end
	end
end

function TradecentreBuy(what, quantity, buytier)
	-- Like other,,, these was A-Long using my bad method work,,, wth english of mine
	if buytier == 1 then
		if what == amResurrector then
			SetHealth(CurrentHedgehog, GetHealth(CurrentHedgehog) + MaxHP[CurrentHedgehog] * quantity)
			if GetHealth(CurrentHedgehog) > MaxHP[CurrentHedgehog] then
				SetHealth(CurrentHedgehog, MaxHP[CurrentHedgehog])
			end
		elseif what == amSeduction then
			MaxHP[CurrentHedgehog] = MaxHP[CurrentHedgehog] + FirstHPBase[CurrentHedgehog] * quantity
		elseif what == amVampiric then
			ATR.Vam.Upg[CurrentHedgehog] = ATR.Vam.Upg[CurrentHedgehog] + quantity
			ATR.Vam.UpgLv[CurrentHedgehog] = ATR.Vam.UpgLv[CurrentHedgehog] + 1
		elseif what == amRope then
			ATR.Mis.Upg[CurrentHedgehog] = ATR.Mis.Upg[CurrentHedgehog] + quantity
			ATR.Mis.UpgLv[CurrentHedgehog] = ATR.Mis.UpgLv[CurrentHedgehog] + 1
		end
	end
end

function TechnocoreBuy(what, quantity, buytier)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	if buytier == 1 then
		local k = Searcher(nil, what, 1, 0, TechnocoreSet[buytier], nil, 1)
		if what == amExtraDamage then
			ATR.Aug.Upg[CurrentHedgehog] = ATR.Aug.Upg[CurrentHedgehog] + quantity
			ATR.Aug.UpgLv[CurrentHedgehog] = ATR.Aug.UpgLv[CurrentHedgehog] + 1
			TechnocoreSet[buytier][k][6][2][CurrentHedgehog] = TechnocoreSet[buytier][k][6][2][CurrentHedgehog] + 1
		elseif what == amGirder then
			ATR.Res.Upg[CurrentHedgehog] = ATR.Res.Upg[CurrentHedgehog] + quantity
			ATR.Res.UpgLv[CurrentHedgehog] = ATR.Res.UpgLv[CurrentHedgehog] + 1
		elseif what == amRubber then
			ATR.Abs.Upg[CurrentHedgehog] = ATR.Abs.Upg[CurrentHedgehog] + quantity
			ATR.Abs.UpgLv[CurrentHedgehog] = ATR.Abs.UpgLv[CurrentHedgehog] + 1
		elseif what == amVampiric then
			ATR.Cri.Upg[CurrentHedgehog] = ATR.Cri.Upg[CurrentHedgehog] + quantity
			ATR.Cri.UpgLv[CurrentHedgehog] = ATR.Cri.UpgLv[CurrentHedgehog] + 1
		end
	end
end

function AmmoNumberDiscountSet(key)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	-- This one set how Quantity of things next in shop
	if Deck > 0 then
		TeamDiscount[TeamOf] = TeamDiscount[TeamOf] - ( AmmoNumberDiscount ) + TeamDiscountBase[TeamOf]
		-- Set Number of Ammo
		if AmmoNumberDiscountSetx2 == true then
			AmmoNumber = (key) * 2
		else
			AmmoNumber = (key)
		end
		-- Set Discount Bonus,,, i was a good merchant
		if (key) ~= 0 then
			AmmoNumberDiscount = ( AmmoNumber * 0.024 - 0.024 )
			if AmmoNumber > 5 then
				AmmoNumberDiscount = AmmoNumberDiscount - ( ( AmmoNumber - 5 ) * 0.01 )
			end
		else
			AmmoNumberDiscount = 0
		end
		TeamDiscount[TeamOf] = TeamDiscount[TeamOf] + ( AmmoNumberDiscount )  + TeamDiscountBase[TeamOf]
		-- Let him know what he doin really
		AddCaption("Number of Ammo you gonna buy next is "..AmmoNumber.." With +"..AmmoNumberDiscount * 100 .."% Discount Bonus (Each Number of Ammo = Number * 2.4% - 2% but decreased if Ammo Number > 5 which : Number * 0.01")
	end
end
	
function ResetDiscountBonus()
	-- Please,,, no discount bugs here
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	TeamDiscount[TeamOf] = TeamDiscount[TeamOf] - ( AmmoNumberDiscount )
	AmmoNumberDiscount = 0
end

function GoToPlayMode()
	Deck = 0
	BMStarter = false
	BMStarterAvailable = true
	ShowMission("Go To PlayMode ["..Deck.."]"..PresetText1, "The Foundry Shop", "You have enter [The Foundry ["..BuyTier.."] ]", 3, 3000)
end

function ShowWeapon(set, buytier, alwaysshow)
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	for k,v in pairs(set[buytier]) do
		if Searcher(nil, v[1], 0, 1, TeamAvailableWeapons[TeamOf], nil, 1, 2) == 1 or alwaysshow ~= nil then
			AddAmmo(CurrentHedgehog, v[1], 1)
		end
	end
end

function HideWeapon()
	for k,v in pairs(AllWeapon) do
		AddAmmo(CurrentHedgehog, v[1], 0)
	end
	AddAmmo(CurrentHedgehog, amHammer, 0)
	AddAmmo(CurrentHedgehog, amSkip, 1)
end

function ReturnWeapon()
	TeamOf =  GetHogTeamName(CurrentHedgehog)
	for k,v in pairs(TeamWeapon[TeamOf]) do
		if Searcher(nil, v[1], 0, 1, TeamAvailableWeapons[TeamOf], nil, 1, 2) == 1 then
			AddAmmo(CurrentHedgehog, v[1], TeamWeapon[TeamOf][k][4])
		end
	end
end

--[[ A Little Log
local TOTALFUNCTION[2016/12/6] >= 95
local TOTALLENGTH[2016/12/6] >= 140632
local TOTALLINE[2016/12/6] >= 3458
--]]

		-- "When you can see The End of the Road Ahead, What will you do ??? Praying ? Search The Greatest Fun ?? Forget About it ? Idk either, but the point is, don't waste it"

--[[

EOF D; ???

NO WAY !!!!

There is NO ENDING Of this little Universe !!! Please More support to Give this Scripts more Leg That used to standing there alone,,,
Support this Mode to Lengthen the Scripts,,, It just matter of Time of the Author,,,

But yeah,,, every more things added here,,, this message on this EOF, eh ! No EOF,,, I Mean, on this Line will still here,,, this message should not erased
So ? is it more long or same as before you support this ???
OFC Its more Long !!!

Technically,,, This Message will be here as there nobody erase this,,, even this modes more long and long,,,

But Your Support really needed here,,, whatever and nevermind what i have say above in this "Line"
Right,,, even me not understand what im saying above ;Q

HOW TO SUPPORT ???
Simply,
Just make ANY Response to this Script,,, ANY Mean,,, Everything,,, even it is use Negative Mean,,

JUST RESPONSE == IM HAPPY SO MUCH ^^

ok then,,, bb and hope a gg if you play this :D-EAD

Re :
------------------------------------------------------------------------------------------------------------------------------
	-- -- -- -- -- -- THE LICENSE
	-- -- -- This File and its Content Included Other Files That Have Same Author is Covered under a License of Copyrights ...
	Licensed Under 'GNU LGPL v3' or Later in Terms Of Copyrights...
	[
	COPY, SHARE, MAKE AS REFERENCE, LEARNING ON, AND DISTRIBUTE IS AT YOUR WILL BUT WHEN FOLLOW SOME SPECIFIED TERMS BELOW ...
	PROHIBITED TO MODIFY, RECLAIM/CLAIMING, AND FALSIFY/COUNTERFEIT THE CONTENT NOR THE FILES !!!
	REPEAT... DO NOT MODIFY THE CONTENT NOR THE FILES ITSELF WITHOUT KNOWLEDGE OF THE AUTHOR !!!
	DO NOT CLAIM THE CONTENT NOR THE FILES BY ANYBODY EXCEPT THE REAL AUTHOR OF THE CREATIONS !!!
	AND DO NOT FALSIFY THE THE CONTENT NOR THE FILES BY ANY WAY THROUGH ANY MANIPULATIONS !!!
	--
	WHEN COPYING OR MAKING THIS AS A REFERENCE ON THE CONTENT OR THE FILES,,, AUTHOR REQUESTED TO CREDITED ONLY IN NAME ...
	PS : "Ask The Author or Check the License For Detailed and Deeper Information of This Copyrights ..."
	Respectfully,
	]{
	]
------------------------------------------------------------------------------------------------------------------------------

--]]

-- "Sad isn't ??? True Sorrow is When We Know That Sadness..."

NotTheEndOfTheLine = true
